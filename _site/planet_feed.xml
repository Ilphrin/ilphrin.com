<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Kevin / Ilphrin - Planet Libre</title>
		<description>Posts categorized as 'planet'</description>
		<link>http://ilphrin.com</link>
		<atom:link href="http://ilphrin.com/feed.category.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Nyaovim le GUI Neovim avec Electron</title>
				<description>&lt;p&gt;Voilà un projet dont j’avais plusieurs fois entendu parler mais sans jamais réellement me pencher dessus. Le seul défaut que je trouvais à Neovim c’est de ne pas avoir de GUI associé vraiment digne de ce nom, ce que je cherche est quelque chose de joli principalement mais aussi qui permette vraiment de profiter d’une interface graphique: prévisualisation, barre de défilement, bulle d’information et autre, etc…&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Et bien il s’avère qu’il existe un projet qui semble s’approcher pas mal de ce que je cherche dans l’architecture! Et ce projet s’appelle &lt;a href=&quot;https://github.com/rhysd/NyaoVim&quot;&gt;Nyaovim&lt;/a&gt; (Nya est l’équivalent de Miaou au Japon). C’est une interface graphique web pour Neovim, qui est utilisé comme application pc grâce à Electron.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;electron.atom.io&quot;&gt;Electron&lt;/a&gt; permet de créer des logiciels “desktop” avec des technos web, et à été développé notamment par Github pour créer leur petit nouveau: &lt;a href=&quot;atom.io&quot;&gt;Atom&lt;/a&gt;. Electron part du moteur de rendu web Chromium avec un outil coté serveur très connu qui est &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;NodeJS&lt;/a&gt;, et permet donc de créer des logiciels en HTML/CSS Javascript.&lt;/p&gt;

&lt;p&gt;L’avantage de ce système c’est qu’avec Nyaovim on va pourvoir d’une part créer des plugins dédiés à ce GUI en créant des &lt;a href=&quot;https://github.com/rhysd/neovim-component&quot;&gt;WebComponent&lt;/a&gt;, comme les deux que le développeur de Nyaovim à déjà codé: &lt;a href=&quot;https://github.com/rhysd/nyaovim-markdown-preview&quot;&gt;markdown-preview&lt;/a&gt; et &lt;a href=&quot;https://github.com/rhysd/nyaovim-popup-tooltip&quot;&gt;popup-tooltip&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Bon du coup comment profiter de cet outil? C’est très simple, il faut disposer du gestionnaire de package de NodeJS appelé &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;NPM&lt;/a&gt;, disponible dans la plupart des dépôt des grandes distribution de ce monde, qui est fourni lorsqu’on installe NodeJS sur son pc. Ensuite la commande a lancer pour installer Nyaovim est la suivante:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo npm install -g nyaovim

nyaovim&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Et voilà votre GUI est maintenant installé et lancé!&lt;/p&gt;

&lt;p&gt;Ce projet est indiqué comme instable sur son dépôt Github donc je ne serais pas vindicateur vis à vis du résultat. Mais il y a quand même de nombreux bugs qui me chagrine encore un peu:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Les bugs graphiques sont souvent présents, j’ai souvent ma barre vim-airline qui apparait en plein milieu de mon buffer, ou un caractère fantome qui se superpose à mon curseur, etc…&lt;/li&gt;
  &lt;li&gt;La bulle de complétion ne s’affiche plus, ou parfois apparait par clignotement, c’est qui est un peu dommage, surtout pour moi qui utilise les snippet Ultisnips à foison…&lt;/li&gt;
  &lt;li&gt;Quelques boutons dans la barre de menu pour ouvrir un buffer de certains fichiers de config’ ne serait pas un mal, comme nyaovimrc.html (le fichier de configuration de l’interface de nyaovim), ou tout simplement du vimrc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Malgré ces soucis je ne peux que conseiller d’aller voir ce projet qui à le mérite d’essayer quelque chose de nouveau et qui part sur une base très solide pour de futurs plugins ou améliorations très sympathique!&lt;/p&gt;

&lt;p&gt;Sur ce j’ai finit pour aujourd’hui, mais j’ai encore deux trois articles dans la poche en ce moment, notamment toujours a propos de Vim/Neovim qui risque de plaire à certains ;)&lt;/p&gt;
</description>
				<pubDate>Tue, 08 Mar 2016 00:00:00 +0100</pubDate>
				<link>http://ilphrin.com/planet/2016/03/08/nyaovim-le-gui-neovim-avec-electron.html</link>
				<guid isPermaLink="true">http://ilphrin.com/planet/2016/03/08/nyaovim-le-gui-neovim-avec-electron.html</guid>
			</item>
		
			<item>
				<title>Génération de code C++ en plugin Neovim avec CLang</title>
				<description>&lt;p&gt;La Piscine de C++ qui marque le début de notre deuxième année à Epitech vient de se terminer. Durant ces deux semaines on étudie à fond la quasi-totalité des concepts liés à la POO.&lt;/p&gt;

&lt;p&gt;Rapidement tout le monde a commencé à chercher tout ce qui pouvait nous faciliter la vie pour coder, et de nombreux étudiants se sont tournés vers des IDE très puissants, mais aussi très lourds. Moi je suis du genre à rester sur mon Neovim même si j’ai moins de fonctionalités, au moins ça marche et je sais ce que je code.&lt;/p&gt;

&lt;p&gt;Mais mon égo en a pris un coup au vu de toutes les fonctionnalités de ces IDE et j’ai eu envie de développer un plugin qui puisse faire, à défaut de complètement, certaines choses de façon équivalentes à ces IDE. Pour ça j’ai dû apprendre à utiliser l’API Python de Neovim, et la librairie de parsing CLang.&lt;/p&gt;

&lt;p&gt;Mon plugin en est à ses balbutiements mais je compte bien l’améliorer au fil du temps. Je vais commencer par parler un peu de la création d’un plugin dans Neovim, puis du fonctionnement de CLang. Dans un prochain article je rentrerais un peu plus dans les détails sur la façon dont j’ai fait fonctionner les deux ensembles, mais cet article est déjà bien assez long ;)&lt;/p&gt;

&lt;!--break--&gt;

&lt;h2 id=&quot;neovim&quot;&gt;Neovim&lt;/h2&gt;

&lt;p&gt;Neovim a totalement changé son API pour les plugin par rapport à Vim, en utilisant &lt;a href=&quot;http://msgpack.org/&quot;&gt;msgpack&lt;/a&gt; pour pouvoir créer des clients comme on veut dans le langage qu’on veut pour faire une API, un GUI, etc…&lt;/p&gt;

&lt;p&gt;Dans mon cas je connais le Python, il y a une API Python, du coup je l’ai codé en Python, tout le monde suit? ;) Mais il y a de nombreux autres clients, vous pouvez voir la liste &lt;a href=&quot;https://github.com/neovim/neovim/wiki/Related-projects&quot;&gt;ICI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pour m’aider j’y suis allé pas-à-pas en suivant plusieurs exemples donnés sur le dépôt de &lt;a href=&quot;https://github.com/neovim/python-client&quot;&gt;l’API Python&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Bon assez parlé place à l’action, comment ça fonctionne un plugin Neovim avec Python? Déjà il faut installer cette API, cela se fait par le biais de la commande suivante:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;sudo pip install neovim&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;J’ai appelé mon plugin &lt;a href=&quot;https://github.com/Ilphrin/easy-cpp.nvim&quot;&gt;easy-cpp.nvim&lt;/a&gt;, je met dans un dossier éponyme le contenu de mon plugin, qui se résume par:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Un README.md qui fera office d’introduction notamment sur Github&lt;/li&gt;
  &lt;li&gt;Un fichier LICENSE (MIT dans mon cas, j’aime bien cette license :3)&lt;/li&gt;
  &lt;li&gt;Un dossier rplugin/python&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;rplugin est pour Remote Plugin, c’est-à-dire les plugins qui son gérés grâce a une API client telle que celle de Python. et le dossier python permet d’indiquer pour quel langage ce plugin est destiné.&lt;/p&gt;

&lt;p&gt;Ce dossier est lui-même composé du:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;dossier easy-cpp/ qui va contenir tout le code, qui pour le moment n’est que dans un fichier &lt;strong&gt;init&lt;/strong&gt;.py parce que je suis sale&lt;/li&gt;
  &lt;li&gt;fichier easy-cpp.py, qui est vide et qui le restera.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Allons ensuite maintenant dans ce fichier &lt;strong&gt;init&lt;/strong&gt;.py. Il contient principalement une classe avec un décorateur de neovim pour indiquer que cette classe dirige le plugin. Cette classe est initialisée avec un paramètre qui est le client de vim en lui-même. Cet objet va servir à faire toute l’interaction avec notre éditeur de texte préferé.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@neovim.plugin&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Easy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vim&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vim&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@neovim.command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;EasyGenerate&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On voit ici que j’ai utilisé deux décorateurs liés à neovim. @neovim.plugin permet donc de marquer votre classe comme étant celle qui gère le plugin comme je l’ai déjà dit. @neovim.command est à placer sur une méthode de votre classe.&lt;/p&gt;

&lt;p&gt;Elle va permettre de transformer votre méthode en commande pour Neovim. C’est-à-dire qu’une fois Neovim lancé, on peut taper :EasyGenerate et la fonction generate() va être lancée. Dans le principe c’est le gros de ce qu’il y a a apprendre pour créer un plugin pour Neovim. Mais il y a encore une chose dont je doit parler et qui est essentiel pour insérer du texte dans un fichier: la variable Buffer.&lt;/p&gt;

&lt;p&gt;On a notre objet self.vim qui contient énormément d’informations sur l’état actuel de l’éditeur (je vous invite a voir les fichiers de tests unitaires de l’API Python qui contiennent pas mal d’information sur le sujet). Parmis les variables qu’il contient j’ai principalement eu à utiliser self.vim.current.buffer et self.vim.buffers&lt;/p&gt;

&lt;p&gt;self.vim.buffers est un tableau qui contient chacune des lignes qui existent dans chacun des buffers ouverts. Le premier niveau du tableau (buffers[0], buffers[1], etc…) contient tour à tour les buffers ouverts. Le deuxième niveau (buffers[0][2], buffers[4][1:5], etc…). Pour modifier il suffit d’assigner une chaine de caractère à une ligne d’un buffer, ou meme un tableau de chaines de caractères.&lt;/p&gt;

&lt;p&gt;Pour ajouter à la fin d’un buffer il y a deux possibilités: soit on veut ajouter à la fin et dans ce cas on fait buffers.append(maChaineOuMonTableau), soit on veut intercaler une ou des lignes entre deux autres, par exemple si je veux insérer du texte à la ligne 42 je fais buffers.append(maChainOuMonTableau, 42). Au final c’est comme un tableau classique en Python :)&lt;/p&gt;

&lt;h2 id=&quot;clang&quot;&gt;CLang&lt;/h2&gt;

&lt;p&gt;CLang est extrêmement puissant, mais il n’y a malheureusement que peu de ressources documentaires sur le sujet, et encore moins pour la librairie en Python. Ayant réussi à faire deux trois chose avec je me suis dit que partager avec tout le monde ce que j’ai appris pourrait en pousser d’autres à faire le pas ;) (et m’apprendre des choses en retour!)&lt;/p&gt;

&lt;p&gt;J’ai commencé par suivre ce tutoriel tout d’abord aux conseil de mon ami &lt;a href=&quot;https://github.com/Strackeror&quot;&gt;Strackeror&lt;/a&gt;: &lt;a href=&quot;http://szelei.me/code-generator/&quot;&gt;http://szelei.me/code-generator/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ce tutoriel est très bien écrit (mais en anglais bien sûr), et il vous donne les bases pour comprendre CLang et l’utiliser dans Python. Mais dans mon cas je ne l’ai pas suivi en entier car mon but était un peu différent de ce qu’il voulait faire. Mon but est d’utiliser CLang pour analyser un fichier d’en-tête C++, et en extirper les prototypes de chaque méthode avec leur espace de nom.&lt;/p&gt;

&lt;p&gt;Je m’explique, j’ai fait un fichier de header pour mes tests, et un fichier de source pour comparer le résultat final que je veux:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef TEXTCOMPONENT_H&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;# define TEXTCOMPONENT_H&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inerTest&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TextComponent&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;TextComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

          &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;superSecretFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;newText&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;newText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;newText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newText&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;newText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newText&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OutText&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;OutText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;OutText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutText&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;OutText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutText&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;outputsmthing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* TEXTCOMPONENT_H */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Et ce que je veux obtenir:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;quot;textcomponent.h&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inerTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inerTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inerTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;superSecretFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputsmthing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;OutText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;J’ai volontairement fait un cas pas très joli d’encapsulation dans des espaces de noms, mais bon au moins si là ça fonctionne c’est que je suis sur une bonne base!&lt;/p&gt;

&lt;p&gt;Donc pour générer ça, on va avoir besoin d’installer clang pour python, pour ça rien de tel qu’un:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;sudo pip install clang&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ensuite on ouvre un fichier python à coté de notre fichier header (je ne parle pas du fichier &lt;strong&gt;init&lt;/strong&gt;.py de tout à l’heure là on se met dans un autre dossier pour travailler sur autre chose sans le lier au plugin). On commence ce fichier en initialisant clang, lui demandant de créer un index, et de parser un fichier donné en paramètre avec sys.argv[]. Enfin, on va utiliser la sortie pour génerer la liste des fonctions du fichier de header:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;clang&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cindex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_library_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;/usr/lib/llvm-3.4/lib/libclang.so.1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cindex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;translation_unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;-x&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;c++&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;-std=c++11&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;-D__CODE_GENERATOR__&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spelling&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;functions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cindex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CursorKind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CXX_METHOD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;functions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;functions&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_all_public_functions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cindex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CursorKind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLASS_DECL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;a_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spelling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_class&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cindex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CursorKind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NAMESPACE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;child_classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_all_public_functions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spelling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child_classes&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cindex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CursorKind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FUNCTION_DECL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spelling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_all_public_functions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;translation_unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pas de panique je vais tout expliquer!&lt;/p&gt;

&lt;p&gt;Les premières lignes sont expliquées dans l’article que j’ai mis en lien plus haut, je ne pense pas avoir besoin de revenir dessus.&lt;/p&gt;

&lt;p&gt;Tout en bas on assigne à classes le retour de la fonction get_all_public_functions qui prend en paramètre un objet Cursor. Cet objet propre a CLang contient tout un tas d’informations sur chaque segment de code, sous forme d’arbre.&lt;/p&gt;

&lt;p&gt;Dans get_all_public_functions() on parcourt la liste des enfants de ce Cursor avec la méthode get_children(), la variable c obtenue est un…Cursor, vu que nous sommes dans un arbre de Cursors, chaque enfant est un autre Cursor dépendant de son parent.&lt;/p&gt;

&lt;p&gt;Cet objet contient de nombreuses informations, dont c.kind qui indique le type du Cursor. Dans notre cas on vérifie pour trois valeurs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Si c’est un classe (CLASS_DECL), dans ce cas-là on appelle la fonction get_methods() plus haut qui récupère toutes les méthodes de cette classe.&lt;/li&gt;
  &lt;li&gt;Si c’est un namespace (NAMESPACE) on recupère de façon récursive le retour de get_all_public_functions() avec comme valeur l’enfant courant. Puis on l’ajoute à result.&lt;/li&gt;
  &lt;li&gt;Si c’est une fonction (FUNCTION_DECL), on l’ajoute simplement à result.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;result étant un dictionnaire, on lui passe en guise le clé c.spelling, qui correspond au code en lui-même pointé par le curseur, dans notre cas c’est soit un nom de classe, soit un nom de namespace, soit un nom de fonction.&lt;/p&gt;

&lt;p&gt;Petit détail, la condition c.location.file.name == sys.argv[1] permet de vérifier qu’on parle toujours du même fichier, et pas d’un fichier récuperé lors d’un #include, qui sera aussi parsé par CLang quoiqu’on fasse, sauf qu’on veut pas l’ajouter en résultat ;)&lt;/p&gt;

&lt;p&gt;La suite au prochain épisode…&lt;/p&gt;
</description>
				<pubDate>Thu, 28 Jan 2016 00:00:00 +0100</pubDate>
				<link>http://ilphrin.com/planet/2016/01/28/generation-de-c++-en-plugin-neovim-avec-clang.html</link>
				<guid isPermaLink="true">http://ilphrin.com/planet/2016/01/28/generation-de-c++-en-plugin-neovim-avec-clang.html</guid>
			</item>
		
			<item>
				<title>Nouvelle version de Sunflower (0.3)</title>
				<description>&lt;p&gt;J’avais déjà parlé de Sunflower il y a bien longtemps. Pour rappel, Sunflower est un logiciel de gestion de fichiers qui a la particularité de se concentrer sur une vue “jumelée”. C’est-à-dire avec deux panneaux de navigation. Le tout dans une interface sympatique et configurable à souhait.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Aujourd’hui est sortie une nouvelle version majeure: La 0.3! Parmi une très grande liste de nouveautés il y a celles-ci que je pourrait citer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ajout d’un bouton “Skip all” sur les fenêtres de dialogue.&lt;/li&gt;
  &lt;li&gt;Ajout des raccourcis pour les menus.&lt;/li&gt;
  &lt;li&gt;Gestion des fichiers .hidden pour les fichiers cachés.&lt;/li&gt;
  &lt;li&gt;Support de la corbeille.&lt;/li&gt;
  &lt;li&gt;Gestion de file d’attentes pour les opérations.&lt;/li&gt;
  &lt;li&gt;Meilleure gestion des liens symboliques.&lt;/li&gt;
  &lt;li&gt;Support de la séparation verticale.&lt;/li&gt;
  &lt;li&gt;Plusieurs corrections de bugs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Et j’en passe un bon nombre. Toutes ces modifications sont visibles sur la page &lt;a href=&quot;https://github.com/MeanEYE/Sunflower/releases/tag/0.3-60&quot;&gt;Github du projet.&lt;/a&gt; Allez voir un peu ce que ça vaut, ce projet mérite vraiment le coup d’oeil ;)&lt;/p&gt;
</description>
				<pubDate>Mon, 18 Jan 2016 00:00:00 +0100</pubDate>
				<link>http://ilphrin.com/planet/2016/01/18/nouvelle-version-de-sunflower.html</link>
				<guid isPermaLink="true">http://ilphrin.com/planet/2016/01/18/nouvelle-version-de-sunflower.html</guid>
			</item>
		
			<item>
				<title>Ce que j&#39;ai appris avec Gaia</title>
				<description>&lt;p&gt;Cela fait un moment que je n’ai pas parlé de Gaia, depuis la dernière fois où j’expliquais mon envie de bosser sur FirefoxOS, et ce que j’ai entrepris pour y contribuer au niveau du code. Je viens de finir de corriger mon premier bug, et il a été ajouté au code de la branche principale de FirefoxOS. Je me suis donc dit qu’un petit debrief sur ce que j’ai appris me permettrai de revoir un peu tout ça et notamment de réfléchir à la suite.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Si je devais résumer en deux mots ce que j’ai appris ce qui me viendrais là tout de suite à l’esprit c’est: Git et Tests.&lt;/p&gt;

&lt;p&gt;La plus grande difficulté quand on corrige un bug ce n’est pas tant la correction en elle-même pour des bugs de cette catégorie. Mais plutôt de se poser la question suivante: “Est-ce que ce que j’ai rajouté ou enlevé à un impact sur le code qui nécessite une modification ailleurs?”. Et dans mon cas la réponse à été un grand OUI (sinon je n’écrirais pas cet article ;) ). La correction du bug à été très simple, je vous montre le code espacé par deux lignes avant et après la modif:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NotificationHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getIconURI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;?titleID=&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;


&lt;span class=&quot;nx&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NotificationHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getIconURI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Jusque là, rien de bien compliqué. En fait là où des modifications devenaient nécessaire, c’est au niveau des tests unitaires. Il fallait modifier la façon dont les tests étaient fait pour ces variables, ce qui à conduit à modifer d’autres éléments, et ainsi de suite.&lt;/p&gt;

&lt;p&gt;Et sans l’aide du système de mentoring je n’aurais jamais vu qu’il fallait faire ces changements!&lt;/p&gt;

&lt;p&gt;Du coup j’ai dû apprendre à utiliser l’outil de tests unitaires de Gaia pour vérifier à chacune de mes modifications si les tests étaient fonctionnels. Cela peut paraître normal pour un développeur affirmé quelle que soit la catégorie, mais je ne suis qu’un jeune étudiant. Ce bug est ma toute première véritable contribution à du code dans le monde du logiciel libre. Du coup j’ai perdu un bon paquet de temps à comprendre ça 8)&lt;/p&gt;

&lt;p&gt;Ensuite est survenu un deuxième problème bien plus long et embêtant: Ma faible connaissance dans Git. Alors oui je l’utilise constamment pour tous les projets à rendre à Epitech, mais ça ne fait pas de moi un utilisateur avancé bien au contraire! Je ne suis jamais allé plus loin qu’un git commit -am “coucou” suivi d’un git push!&lt;/p&gt;

&lt;p&gt;Il a fallu donc tout que j’apprenne sur le système de branche, de merge, et autres joyeusetés qui forment ce CVS. Et c’est surement de ce coté-là que j’ai le plus appris car c’est là que j’ai fais le plus d’erreurs! (qui m’ont obligé d’ailleurs à faire 3 Pull Request sur Github avant que tout soit fonctionnel)&lt;/p&gt;

&lt;p&gt;Problème ou pas problème, je vais m’y remettre dès que la période de piscine de C++ d’Epitech est terminée. Car avec le système de mentoring de bug pour les débutants comme moi, on peut facilement s’intégrer et se faire aider par un mentor de bug, dans mon cas  azasypkin (qui à fait preuve d’une grande patience avec moi x) ), et ça m’a beaucoup motivé et donné envie de continuer!&lt;/p&gt;
</description>
				<pubDate>Sat, 02 Jan 2016 00:00:00 +0100</pubDate>
				<link>http://ilphrin.com/planet/2016/01/02/ce-que-j-ai-appris-avec-gaia.html</link>
				<guid isPermaLink="true">http://ilphrin.com/planet/2016/01/02/ce-que-j-ai-appris-avec-gaia.html</guid>
			</item>
		
			<item>
				<title>Ultisnips: Autocomplétion HTML</title>
				<description>&lt;p&gt;Pour ceux qui ne le savent pas, Ultisnips est un plugin pour Vim/NeoVim qui permet de créer des snippets. C’est l’outil le plus puissant de création de snippet que j’ai pu voir jusque maintenant, tout éditeur confondu. Les possibilités offertes par ce plugin sont immense, alors qu’il est très simple d’utilisation, a partir du moment où l’on sait exactement ce que l’on veut faire.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Cela fait maintenant 3 mois que j’utilise Ultisnips, et à chaque fois que je remarque que je répète souvent quelque chose dans mon code, je me presse d’en faire un snippet pour Ultisnips! Je dois en être à une vingtaine de snippets maintenant, et je commence tout juste à m’habituer à utiliser les fonctionalités les plus avancés. Et notamment les interpolation Python.&lt;/p&gt;

&lt;p&gt;Ça en jette comme nom hein? En fait derrière ce nom aux consonnances Trekistes se cache un moyen de controler les snippets en utilisant des bouts de code en Python. Je ne vais pas faire un cours sur Ultisnips parce qu’il y à déjà largement les ressources suffisantes qui existent déjà (J’en ai parlé dans mon article sur les &lt;a href=&quot;http://ilphrin.com/planet/2015/09/16/topo-des-plugins-vim-01.html&quot;&gt;plugin Vim&lt;/a&gt; avec notamment tous les liens des vidéos de cours).&lt;/p&gt;

&lt;p&gt;J’ai récemment essayé de faire mon propre snippet utilisant une interpolation Python. J’adore Python alors il était de mon devoir d’en faire, aussi inutile qu’il fût ;) Du coup je me suis lancé dans l’idée de faire un snippet pout autocompléter les balises HTML, notamment en les refermant tout de suite derrière, sans avoir à utiliser un autre plugin Vim. Et j’ai réussi (bon en même temps c’est pas la chose la plus complexe à faire), pour cela j’ai joué avec une expression régulière, et d’un petit test en Python. Voici donc le code de ce snippet:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;notUniqueTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;br&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;link&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;meta&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;img&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;hr&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;endglobal&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;snippet&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;([a-z]+)(.\*)&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Tag&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rA&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;`!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notUniqueTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;snip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;snip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sb&quot;&gt;`$1`&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notUniqueTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;snip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;/&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;endsnippet&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Le code de ce snippet n’est pas très compliqué mais je vais m’expliquer rapidement. Mon expression régulière vérifie l’existence d’un mot en minuscule, et potentiellement d’autres mots qui le suivent quels qu’ils soient, le tout entouré de chevrons. Si cette condition est vérifiée, alors le code Python commence.&lt;/p&gt;

&lt;p&gt;J’ai besoin de vérifier que ce n’est pas une balise unique que j’utilise, tel que &lt;br /&gt; ou &lt;meta /&gt;. Pour cela j’ai crée une fonction qui prend en paramètre le premier modèle de l’expression régulière ( ([a-z]+) soit le premier mot), et qui vérifie si le mot contenu ne fait pas partie de la liste écrite dans la fonction notUniqueTag().&lt;/p&gt;

&lt;p&gt;Si cete condition est elle aussi vérifiée, alors je change le contenu pour mettre &lt;mabalise&gt;$1&lt;/mabalise&gt;, avec $1 qui correspond à la position du curseur. Une fois qu’on a tapé le contenu, puisque c’est un snippet il suffit d’appuyer sur le raccourci pour aller à la position de curseur d’après (pour moi c’est Ctrl+J) pour aller à la fin de la balise fermante.&lt;/p&gt;

&lt;p&gt;J’aime vraiment cette capacité à faire rapidement des snippet dont le comportement n’est pas fixe, ça ouvre des possibilités pour se faciliter la vie qui sont très intéressante, si vous avez écrit des super snippet faites le moi savoir je suis toujours à l’affût de perles rares de ce genre ;)&lt;/p&gt;

&lt;p&gt;Bonne journée!&lt;/p&gt;

&lt;h3 id=&quot;edit&quot;&gt;EDIT&lt;/h3&gt;
&lt;p&gt;J’ai modifié grandement mon snippet, afin de gérer le niveau
 d’indentation et le saut de ligne en cas de balise de bloc (comme &amp;lt;body&amp;gt;). Pour cela j’ai changé l’expression régulière pour prendre tous les caractères avant la balise, pour les réutiliser.&lt;/p&gt;

&lt;p&gt;J’ai découpé un peu mon code python avec 3 fonctions supplémentaires:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;needNewLine: Qui regarde si la balise que l’on veut taper fait parti d’un tableau, si c’est le cas c’est qu’il faudra faire des saut de ligne et mettre le cursor sur la ligne vide entre la balise ouvrante et la balise fermante.&lt;/li&gt;
  &lt;li&gt;makeBegTag: Me permet d’écrire la balise ouvrante, en prenant en mettant un saut de ligne si needNewLine renvoie 1. Dans ce cas là on rajoute une indentation correspondant à celle récupérée avec le match.group(1)&lt;/li&gt;
  &lt;li&gt;makeEndTag: Idem pour la balise fermante&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Du coup le code final ressemble maintenant à ça:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;notUniqueTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;br&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;link&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;meta&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;img&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;hr&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;needNewLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;html&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;head&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;section&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;article&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;style&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;aside&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeBegTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;needNewLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;  &amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeEndTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;needNewLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;endglobal&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;snippet&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;(.*)&amp;lt;([a-z]+)(.*)&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Tag&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rA&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;`!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notUniqueTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;snip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeBegTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;snip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeBegTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;sb&quot;&gt;`$1`&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notUniqueTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;snip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeEndTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;endsnippet&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
				<pubDate>Wed, 16 Dec 2015 00:00:00 +0100</pubDate>
				<link>http://ilphrin.com/planet/2015/12/16/ultisnips-autocompletion-html.html</link>
				<guid isPermaLink="true">http://ilphrin.com/planet/2015/12/16/ultisnips-autocompletion-html.html</guid>
			</item>
		
			<item>
				<title>Livres et musiques libres</title>
				<description>&lt;p&gt;La musique et les livres font partie de mon quotidien depuis très longtemps, je ne peux pas faire quelque chose sans écouter un peu de musique dans mon casque ou prendre les transports en commun sans me balader avec quelque chose à lire.&lt;/p&gt;

&lt;p&gt;Et depuis que je connais la licence Creative Commons, je cherche ce qu’il se fait dans le domaine de la licence libre à ce sujet, du coup je me suis dit que la moindre des choses était de parler autour de moi de ceux qui m’ont plu et marqués&lt;/p&gt;

&lt;!--break--&gt;

&lt;h2 id=&quot;musique&quot;&gt;Musique&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.obsidianshell.com/div_en.php?p=news_en&quot;&gt;Obsidian Shell&lt;/a&gt;: Un groupe de métal symphonique, d’origine hongroise (pas fréquent n’est-ce pas?), c’est notamment l’un de leur album qui sert de Soundtrack pour le jeu vidéo libre &lt;a href=&quot;http://mars-game.sourceforge.net/&quot;&gt;M.A.R.S&lt;/a&gt;. Les musiques de ce groupe ont pas mal de punch et sont très bien pour mettre dans l’ambiance pour faire quelques parties de jeux vidéos.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.starrysky.fr/&quot;&gt;Starrysky&lt;/a&gt;: Un autre groupe de metal mais avec un style japonais, qui me fait parfois un peu penser à ce qu’on pourrait entendre avec du Vocaloid. Et en plus ils sont français, et très sympa pour les avoir rencontrés en vrai. Ils ont une bio sur leur site que j’ai mis en lien qui en dit plus sur eux.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pornophonique.de/&quot;&gt;Pornophonique&lt;/a&gt;: En voilà qui sortent pas mal du lot, ce duo est composé d’un guitariste…et d’un joueur de game boy. Rien de mieux pour mettre du 8bit dans les oreilles. J’aime surtout ce groupe par leur originalité, mais je n’en écoute pas tous les jours.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gwb.la/#listen&quot;&gt;Great White Buffalo&lt;/a&gt;: Ils font un rock doux et vraiment très agréable à écouter tout au long de la journée, avec parfois des morceaux qui bougent un peu plus, mais dans l’ensemble leurs musiques sont très bien pour se détendre ou faire une tache qui ne demande pas une concentration trop forte (comme écrire cet article, au hasard ;) )&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.dancing-willow.de/&quot;&gt;Dancing Willow&lt;/a&gt;: Alors là on part carrément sur autre chose de plus festif avec ce groupe de folk irlandaise. J’aime énormément leurs musiques qui sont capables de mettre de bonne humeur n’importe quel grincheux de ce bas monde.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://music.emilevankrieken.com/&quot;&gt;Aether&lt;/a&gt;: En fait le nom complet serait plutôt &lt;em&gt;Aether Original Soundtrack&lt;/em&gt;, puisqu’en fait ces musiques ont été créées pour un mod de Minecraft par un certain Emile Van Krieken, il avait alors 14 ou 16 ans quand ils les a fait, seul. Et le résultat est vraiment très agréable, toutes les musiques sont d’un genre très doux.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;livres&quot;&gt;Livres&lt;/h2&gt;

&lt;p&gt;Bon là c’est un peu plus court, je n’ai pas une très grande culture de ce coté-là, mais faut pas hésiter à m’en faire connaitre :D&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.atramenta.net/authors/aquilegia-nox-et-leo-sigrann/2808&quot;&gt;Pattes de velours&lt;/a&gt;: C’est la première fois que je lis quelque chose de la catégorie des polars, que ce soit sous licence libre ou non. Et cette première expérience m’a énormément plu! L’intrigue tourne autour de trois personnages qui se retrouvent emmené dans une histoire assez intéressante, et surtout le livre utilise une narration qui change de point de vue, passant d’un personnage a l’autre à chaque moment. Ainsi on voit tour à tour ce que pense et fait chacun des personnages dans la scène en cours.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.atramenta.net/lire/la-mort-est-mon-metier/44019&quot;&gt;La mort est mon métier&lt;/a&gt;: Je l’ai lu il y a un moment alors je ne m’en rappelle plus tellement, mais je me souviens l’avoir lu très rapidement (même pour un livre de cette taille, assez court). Et même si il peut donner le cafard pour le reste de la journée j’y ai pris un grand plaisir à le lire. Il a été écrit par Frédéric Bézies, qui n’est pas un inconnu au monde de la licence libre francophone dans ce domaine. Il faudrait que je lise les autres livres qu’il a fait.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Voilà c’est à peu près tout. La quasi-totalité des musiques sont trouvable et téléchargeable sur Jamendo, et pareillement pour les livres qui sont sur Atramenta. Ces deux sites sont vraiment bien dans leurs domaines respectifs, je vous les conseille vivement si vous ne les connaissez pas déjà! Sur ce bonne journée, et bonne lecture/écoute ;)&lt;/p&gt;
</description>
				<pubDate>Tue, 08 Dec 2015 00:00:00 +0100</pubDate>
				<link>http://ilphrin.com/planet/2015/12/08/livres-et-musiques-libres.html</link>
				<guid isPermaLink="true">http://ilphrin.com/planet/2015/12/08/livres-et-musiques-libres.html</guid>
			</item>
		
			<item>
				<title>Mes premiers tests unitaires en Web</title>
				<description>&lt;p&gt;Dans le cadre de mon stage, je dois faire un outil de monitoring en Web pour afficher des statistiques sur des bases de données ElasticSearch. Nous avions carte blanche pour les technos à utiliser, l’organisation de l’outil, etc… L’outil en lui-même fonctionne, mais puisqu’il s’agit d’un stage (mon premier en plus), il y a tout interêt à solidifer cet outil et en profiter pour apprendre le plus de technos possibles.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Dans cette optique, je me suis lancé dans l’idée de rajouter des tests unitaires pour aider au développement futur de notre outil de monitoring. Je n’ai jamais fait de tests unitaires (je suis étudiant ne me jetez pas de pierres tout de suite ;) ), c’était donc l’occasion d’apprendre à en faire. Après avoir regardé à droite et à gauche sur le net, mon attention s’est fixé sur la combinaison PhantomJS + Mocha + Chai. Donc pour ceux qui ne connaissent pas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://phantomjs.org&quot;&gt;PhantomJS&lt;/a&gt; est un moteur de rendu web basé sur WebKit, et se comporte comme un navigateur web. A la différence qu’il servira non pas à aller regarder les derniers gifs sur 9gag mais à lancer du code Javascript. Le site web donne un aperçu de ce qu’il est possible de faire avec.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mochajs.org&quot;&gt;Mocha&lt;/a&gt; est un framework de test unitaires en Javascript. Il semble avoir toutes les fonctionalités qu’on peut éspérer pour un framework de test et il est largement utilisé donc dispose d’une bonne communauté pour répondre à la plupart des questions que l’on pourrait se poser.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chaijs.com&quot;&gt;Chai&lt;/a&gt; est une librairie d’assertion. On pourrait penser que Mocha en aurait une mais ce n’est pas le cas, en fait Mocha va servir pour tout ce qui n’est pas une assertion, et nous laissont ce dernier aux mains de Chai.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pour information, l’outil web utilise le Framework AngularJS. Donc il faut que tout ce gros bazar fonctionne pour tester mes controlleurs, mes services, etc… Et je puis vous dire que ça a été un beau gros casse tête, c’est un point que je déteste dans le web c’est cet éparpillement d’outils dans tous les sens et pour tout et n’importe quel utilisation. Et plus il y a d’outils plus c’est difficile de mettre de l’ordre dans ce qu’on fait et de maitriser ce qu’il se passe. M’enfin c’est un autre sujet.&lt;/p&gt;

&lt;p&gt;Et donc pour que les trois outils, cités plus haut, fonctionnent avec une application AngularJS, il faut rajouter à la liste Angular Mocks, qui permet d’injecter des modules/services et autres pour des tests unitaires.&lt;/p&gt;

&lt;p&gt;Dans un fichier html, on inclu tout ça comme ci-dessous (et dans cet ordre, sinon tout se casse):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;./node_modules/mocha/mocha.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;./node_modules/chai/chai.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;mocha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;bdd&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;mocha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;angular-mock.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;test/tests.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mochaPhantomJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;mochaPhantomJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;mocha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;J’ai installé Mocha et Chai par le biais de Node Package Manager (npm), PhantomJS a été compilé à la main (c’est super long je vous préviens), et avec npm toujours j’ai installé mocha-phantomjs, qui permet de faire fonctionner les deux ensembles.&lt;/p&gt;

&lt;p&gt;Une fois tout cela en place on va pouvoir commencer à écrire les tests unitaires dans le fichier tests.js. Mon but est de tester les fonctionalités de mon Service AngularJS, qui contient la quasi-totalité des fonctions de mon applications. J’appelle ici mon module ‘monitoring’ et mon service ‘totalService’.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chai&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chai&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;monitoring&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;totalService&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;monitoring&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_totalService_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_$resource_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_$location_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;totalService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_totalService_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$resource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_$resource_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_$location_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On initialise ici Chai et on injecte le module d’abord en lançant angular.module(‘monitoring’), puis dans le beforeEach avec module(‘monitoring’), ainsi que le service TotalService avec la méthode inject(). Il ne reste plus qu’à le tester en lançant la commande:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;mocha-phantomjs -p chemin/vers/phantomjs/bin/phantomjs &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/TestRunner.html&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ensuite le reste dépend de l’application, et tout est expliqué correctement sur les docs respectives de Mocha, Chai et PhantomJS. Je suis content d’y être finalement arrivé après plusieurs jours à me casser la tête pour faire marcher tout ça. J’ai notamment passé deux jours avec un ‘undefined is not a function’ de angular-mock. Je pense que si je dois me lancer dans un gros projet Web ce serait de faire une bibliothèque qui simplifie tout ça, par exemple un pack qui comprend Mocha, Chai, PhantomJS, et Angular Mock, avec une simple commande pour lancer tout ça, et avec de base un dossier d’exemple qu’il ne reste plus qu’à reprendre et modifier pour travailler.&lt;/p&gt;

</description>
				<pubDate>Sun, 08 Nov 2015 00:00:00 +0100</pubDate>
				<link>http://ilphrin.com/planet/2015/11/08/mes-premiers-tests-unitaires-en-web.html</link>
				<guid isPermaLink="true">http://ilphrin.com/planet/2015/11/08/mes-premiers-tests-unitaires-en-web.html</guid>
			</item>
		
			<item>
				<title>Premiers pas avec Gaia (FirefoxOS)</title>
				<description>&lt;p&gt;J’utilise tous les jours mon Open C avec Firefox OS dessus, depuis deux ans maintenant (plus ou moins).
J’ai vu passer l’OS de la version 1.2 jusqu’à la version 3.0 d’aujourd’hui, si on omet la “nouvelle” branche 2.5 que je n’ai pas encore pu observer par moi-même.
Je met fréquemment a jour mon téléphone grâce au travail considérable de la communauté francophone pour Firefox OS qui a travaillé dur pour fournir un système automatisé de construction de builds installable sur les Open C vendu sur Ebay et dans les magasin en France, et ce avec différentes branches (la Beta, la Aurora, la Nightly, et Spark en 2.5), tout est expliqué en détail sur le site &lt;a href=&quot;http://builds.firefoxos.mozfr.org/doc/fr/devices/zte-open-c&quot;&gt;http://builds.firefoxos.mozfr.org/doc/fr/devices/zte-open-c&lt;/a&gt;&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Mais quant au système lui-même on retrouve de façon assez récurrente des commentaires sur ses défaut, ou les fonctionalités qu’il lui manque. Le premier qui me vient a l’esprit est le support du protocole &lt;a href=&quot;https://fr.wikipedia.org/wiki/CardDAV&quot;&gt;CardDav&lt;/a&gt;, qui est un protocole qui permet la synchronisation de ses contact a travers différent appareils.
Un bug a été crée vis-à-vis de ce manque sur le Bugzilla, datant de &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=859306&quot;&gt;début 2013&lt;/a&gt;, et qui depuis ne semble pas montrer le bout de son nez, même si la demande se fait très forte (moi le premier je dois l’avouer).&lt;/p&gt;

&lt;p&gt;Puisque Firefox OS est un projet libre, et que je fais mes début dans le Web, je me suis dit “Pourquoi ne pas essayer de mettre ma pierre a l’édifice?”! Et j’ai donc commencé a lire la documentation relative à Gaia. Je ne vais pas détailler ici ce qu’est exactement Gaia (il existe de très bonnes explications sur internet facilement trouvable a ce sujet), mais en gros c’est la couche graphique de Firefox OS: L’interface, les applications de base, etc…
Donc la première chose que j’ai fait c’est de regarder les bugs encore ouverts et qui sont marqué pour être à corriger par des petits nouveaux comme moi, a l’aide de l’outil web &lt;a href=&quot;http://www.joshmatthews.net/bugsahoy/?b2g=1&quot;&gt;Bugs Ahoy&lt;/a&gt; qui fait le café de ce coté là.
J’ai donc rapidement choisi un bug et envoyé une demande sur Bugzilla pour qu’on m’assigne ce bug. Il faut savoir qu’un bug peut posséder aussi un mentor, et ce système m’a tout de suite séduit puisqu’il permet de se faire aider par ledit mentor tout au long de l’étape de correction du bug pour faire ses débuts.&lt;/p&gt;

&lt;p&gt;La suite donc consiste a faire un fork du dépot de Gaia sur Github, de créer une branche de développement correspondant au bug que l’on souhaite corriger, et…à le corriger =D.
Outre la documentation qui est très complète (et presque entièrement traduite en français sur le MDN), la facilité d’utilisation des outils de développement, et l’accueil et l’aide agréable que j’ai reçu de la part des développeur m’ont vraiment donné envie de m’impliquer dans le développement de Gaia.
Même si pour l’instant je n’ai encore rien fait (ma correction est encore incomplète et le mentor du bug m’aide du mieux qu’il peut pour que je comprenne quoi faire), j’ai vraiment envie de m’investir plus longuement sur le sujet, et corriger le plus de bug possible.
Oui parce que, mon objectif à moi pour l’instant ce n’est pas de rajouter la fonctionalité révolutionnaire ou d’implémenter le CardDav dont je parlais plus haut, mais simplement de m’acquitter de la tâche souvent considerée comme ingrate de la correction de bug gênants pour le fonctionnement de l’OS.&lt;/p&gt;

&lt;p&gt;Et peut-être que cela laissera plus de temps à des développeurs plus experimentés pour bosser sur des sujet plus complexes ;).&lt;/p&gt;

&lt;p&gt;Si vous êtes comme moi et que vous avez envie de vous lancer, mais sans trop oser, dites-vous bien que d’autres sont venu avant et ont déjà fait dix-mille bêtises avant vous (moi le premier, je suis long a comprendre les choses!). Et en plus en terme d’outils ça ne demande pas grand chose pour pouvoir travailler efficacement:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Le dossier du dépot Gaia que vous avez forké&lt;/li&gt;
  &lt;li&gt;Le plugin WebIDE pour lancer votre version modifiée de Gaia&lt;/li&gt;
  &lt;li&gt;Et….c’est tout!&lt;/li&gt;
  &lt;li&gt;Ah si j’oubliais, beaucoup de patience, pour comprendre un peu comment tous ces outils s’imbriquent dans votre environnement de développement et télécharger Gaia ;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Maintenant que j’y pense, ce serait cool d’avoir des événements un peu de type Hackaton, mais orienté sur la formation de nouveaux contributeurs curieux pour Firefox OS dans Lyon. Mais bon avant la dinde de Noël c’est pas la peine d’espérer!&lt;/p&gt;

&lt;p&gt;Avant de finir, vous avez vu ce que l’on peut faire avec Spark (Firefox OS 2.5)? Avec une recherche sur Lilo/DuckDuckGo/Tonton Roger, on peut trouver des exemple de deux/trois add-ons qui ont l’air vachement cool! Notamment un gars qui a rajouté une dizaine d’icones en bas du menu des notifications (le menu qu’on fait descendre avec un glissement de doigt du bord haut vers le bas). Malheureusement maintenant que j’écris cet article je n’arrive plus a retrouver où est-ce que j’ai vu cet add-on, mais bon tant pis il re-fera bien son apparition!&lt;/p&gt;
</description>
				<pubDate>Fri, 16 Oct 2015 00:00:00 +0200</pubDate>
				<link>http://ilphrin.com/planet/2015/10/16/coder-pour-firefoxos-c'est-cool.html</link>
				<guid isPermaLink="true">http://ilphrin.com/planet/2015/10/16/coder-pour-firefoxos-c'est-cool.html</guid>
			</item>
		
			<item>
				<title>Topo de mes plugins Vim - 02</title>
				<description>&lt;p&gt;Les plugins c’est vraiment le top, alors dans Vim je vous en parle même pas, c’est comme rajouter des animations CSS, si je ne fait pas attention j’en rajoute un peu partout! Depuis la dernière fois j’ai rajouté quelque plugins qui ne révolutionnent pas mon utilisation de Vim, mais restent quand même un petit plus agréable. Du coup aujourd’hui ça va être plus court mais il y aura plus de monde ;)&lt;/p&gt;

&lt;!--break--&gt;

&lt;h2 id=&quot;rustvim&quot;&gt;rust.vim&lt;/h2&gt;

&lt;h4 id=&quot;pour-grer-le-langage-de-mozilla&quot;&gt;Pour gérer le langage de Mozilla&lt;/h4&gt;

&lt;p&gt;Installation: &lt;a href=&quot;http://vimawesome.com/plugin/rust-vim-love-story&quot;&gt;http://vimawesome.com/plugin/rust-vim-love-story&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Je pense que tout est dans le titre, si vous vous lancez dans l’apprentissage de Rust ce plugin est incontournable pour avoir une coloration syntaxique et quelques outils de completion (comme pour la documentation de code avec ///), et quelques actions supplémentaires (mais je n’utilise que la coloration syntaxique personnellement).
Note intéressante sur ce plugin: Apparemment il se synchronise de façon journalière au dépot github de Rust (le dépot du plugin pas le plugin en lui-même hein!)
Il n’y a pas besoin de configuration précise pour fonctionner correctement, vous faites un git clone dans votre dossier de plugins et le tour est joué!&lt;/p&gt;

&lt;h2 id=&quot;indentline&quot;&gt;indentLine&lt;/h2&gt;

&lt;h4 id=&quot;savoir-o-en-est-lindentation&quot;&gt;Savoir où en est l’indentation&lt;/h4&gt;

&lt;p&gt;Installation: &lt;a href=&quot;http://vimawesome.com/plugin/indentline&quot;&gt;http://vimawesome.com/plugin/indentline&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;C’est un plugin que j’ai découvert cette semaine. Il permet d’afficher des guides pour les nieaux d’indentation dans le fichier. Je trouve ça assez pratique surtout quand des fois j’ai de mauvaises indentation (genre une espace après avoir indenté d’un niveau).
Avec ce plugin on peut notamment configurer le caractère a afficher en fond comme guide, et aussi la couleur de ce caractère. Respectivement avec les commandes dans le vimrc:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:indentLine_char &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;¦&amp;#39;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;quot;Je ne sais pas comment on obtiens ce caractère au clavier, je l&amp;#39;ai récuperé avec un Copier-Coller&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:indentLine_color_term &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;quot;Pour avoir une couleur noir&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;nerdcommenter&quot;&gt;NERDCommenter&lt;/h2&gt;

&lt;h4 id=&quot;les-commentaires-faciles&quot;&gt;Les commentaires faciles&lt;/h4&gt;

&lt;p&gt;Installation: &lt;a href=&quot;http://vimawesome.com/plugin/the-nerd-commenter&quot;&gt;http://vimawesome.com/plugin/the-nerd-commenter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Je l’utilise souvent pour écrire un pavé de texte dans du code, puis le mettre en commentaire en sélectionnant le tout et en faisant ensuite \cc ou \cs. Il dispose de tout un tas de commandes pour aller un peu plus loin dans la gestion des commentaires mais son utilisation basique me suffit amplement. Il ne lui manque plus qu’à ajouter la gestion pour Rust et ce serait parfait :D (j’ai posté une Issue sur la page Github à ce sujet, je mettrai à jour l’article si il y a du nouveau de ce coté là!)&lt;/p&gt;

&lt;h2 id=&quot;vim-cargo&quot;&gt;vim-cargo&lt;/h2&gt;

&lt;h4 id=&quot;quelques-commandes-pour-cargo&quot;&gt;Quelques commandes pour Cargo&lt;/h4&gt;

&lt;p&gt;Installation: &lt;a href=&quot;http://vimawesome.com/plugin/vim-cargo&quot;&gt;http://vimawesome.com/plugin/vim-cargo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fork plus complet: &lt;a href=&quot;https://github.com/shmup/vim-cargo&quot;&gt;https://github.com/shmup/vim-cargo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tant qu’on parle de Rust autant parler de ce plugin. Ce petit plugin très simple rajoute 4 (à ce jour, et 8 dans le Fork que j’ai mis en lien) petites commandes classiques pour manipuler Cargo le gestionnaire de projet qui va de pair avec Rust. Le code semble très court et simple je pense que je vais essayer de l’étoffer un peu, ça me permettra d’apprendre a écrire du VimScript!&lt;/p&gt;

&lt;h2 id=&quot;colorizer&quot;&gt;Colorizer&lt;/h2&gt;

&lt;h4 id=&quot;avoir-un-surlignage-selon-les-couleurs&quot;&gt;Avoir un surlignage selon les couleurs&lt;/h4&gt;

&lt;p&gt;Installation: &lt;a href=&quot;http://vimawesome.com/plugin/color-highlight&quot;&gt;http://vimawesome.com/plugin/color-highlight&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tout est dans le titre encore une fois. Colorizer va analyser votre texte/code, et si il reconnait des écritures de format de couleur il va surligner le texte de la couleur correspondante, par exemple avec “red” il va surligner red en rouge, il sait reconnaitre aussi des modèles plus complexes comme notamment les format utilisés en CSS. #FF0000, rgb(255, 0, 0), rgba(255, 0, 0, 255) et hsl(120%, 70%, 820%) par exemple seront tous surligné en une teinte de rouge.&lt;/p&gt;

&lt;h2 id=&quot;mru-most-recently-used&quot;&gt;MRU (Most Recently Used)&lt;/h2&gt;

&lt;h4 id=&quot;voir-les-fichiers-rcemments-ouverts&quot;&gt;Voir les fichiers récemments ouverts&lt;/h4&gt;

&lt;p&gt;Installation: &lt;a href=&quot;http://vimawesome.com/plugin/mru-vim&quot;&gt;http://vimawesome.com/plugin/mru-vim&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MRU permet par le biais de la commande eponyme (:MRU, on sait jamais) de voir la liste des fichiers récemments ouverts, d’en sélectionner un, et de l’ouvrir avec la touche Enter. C’est une fonctionalité classique mais j’avoue que je n’y pensais plus quand j’utilisais Vim, maintenant je lance vim dans mon terminal où que je sois avec j’ouvre le fichier sur lequel je bosse en ce moment avec le :MRU. Je me suis meme permis de rajouter ces quelque petites lignes dans mon vimrc:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; bufname&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;autocmd&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;VimEnter&lt;/span&gt; * MRU
&lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;autocmd&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;BufNewFile&lt;/span&gt; * MRU&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Comme ça MRU se lance si j’ai ouvert vim sans aucun fichier en paramètre, et lorsque que je crée un nouveau buffer vide. Néanmoins il ne s’ouvre pas lorsque je crée un nouvel Onglet vide (j’y travaille j’y travaille!)&lt;/p&gt;
</description>
				<pubDate>Mon, 21 Sep 2015 00:00:00 +0200</pubDate>
				<link>http://ilphrin.com/planet/2015/09/21/topo-de-mes-plugins-vim-02.html</link>
				<guid isPermaLink="true">http://ilphrin.com/planet/2015/09/21/topo-de-mes-plugins-vim-02.html</guid>
			</item>
		
			<item>
				<title>Topo de mes plugins Vim - 01</title>
				<description>&lt;p&gt;Au fil des mois de mes utilisations de Vim, je finis par emmagasiner un bon paquet de plugins, dont je me sers plus ou moins souvent selon ma capacité à me souvenir de leur existence dans mes dossier. Et le gros problème que j’ai avec ces plugins c’est que je pour beaucoup je ne me souviens jamais de comment ils fonctionnent de A à Z, et j’aime avoir une documentation complète pour me rappeler tout ça.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Or, autant Vim en lui même est très bien documenté avec non seulement des documents de référence pour le :help mais aussi par le biais de tutoriaux très bien fait tels que VimTutor ainsi qu’un jeu web pour apprendre les bases de vim. (Sans parler de VimGolf, tiens j’irais y jouer après la rédaction de cet article.) Mais pour les plugins je manque généralement de ressources, et la documentation de référence fournie avec le :help ne me suffit pas pour me souvenir de la configuration précise d’un plugin quand je veux modifier quelque chose de précis, ou parfois c’est (je l’avoue) simplement dû a ma flemme de lire la langue de Shakespeare.&lt;/p&gt;

&lt;p&gt;Du coup je vais écrire ici toutes mes notes sur l’utilisation des mes plugins vim, comment je peux configurer etc… et j’aurais peut-être au bout d’un moment une bonne base de connaissances qu’il deviendra intéréssant d’utiliser (c’est pour ça que j’ai mis - 01 dans le titre c’est que je pense découper en plusieurs articles pour ne pas que ça fasse trop gros d’un seul coup)&lt;/p&gt;

&lt;h2 id=&quot;ultisnips&quot;&gt;Ultisnips&lt;/h2&gt;

&lt;h3 id=&quot;faire-des-snippets-comme-dans-atom-ou-sublimetext&quot;&gt;Faire des snippets comme dans Atom ou SublimeText&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;www.sirver.net&quot;&gt;Site de l’auteur&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;: http://vimawesome.com/plugin/ultisnips-forever-and-always&lt;/p&gt;

&lt;p&gt;C’est sûrement l’outil le plus abouti à ce jour pour ce qui est de l’écriture de snippets. Mais j’ai eu énormément de mal à le faire fonctionner, si j’ai bien compris d’ou venait le souci, c’est dû a une incompatibilité avec autre plugin.
Donc pour éviter ce genre de problèmes il faut mettre ses snippets dans un autre dossier que ~/.vim/snippets. Moi j’ai simplement mis ~/.vim/Ultisnips/ et modifié le paramètre dans mon vimrc:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:UltiSnipsSnippetsDir &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;~/.vim/Ultisnips/&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Une fois cela fait on va pouvoir commencer a écrire des snippets! Et pour cela il existe plusieurs vidéos qui sont très bien faites dans le domaine. Je ne puis que conseiller les liens donné dans la documentation d’Ultisnips:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sirver.net/blog/2011/12/30/first-episode-of-ultisnips-screencast/&quot;&gt;http://www.sirver.net/blog/2011/12/30/first-episode-of-ultisnips-screencast/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sirver.net/blog/2012/01/08/second-episode-of-ultisnips-screencast/&quot;&gt;http://www.sirver.net/blog/2012/01/08/second-episode-of-ultisnips-screencast/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sirver.net/blog/2012/02/05/third-episode-of-ultisnips-screencast/&quot;&gt;http://www.sirver.net/blog/2012/02/05/third-episode-of-ultisnips-screencast/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sirver.net/blog/2012/03/31/fourth-episode-of-ultisnips-screencast/&quot;&gt;http://www.sirver.net/blog/2012/03/31/fourth-episode-of-ultisnips-screencast/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ainsi que:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://vimcasts.org/episodes/meet-ultisnips/&quot;&gt;http://vimcasts.org/episodes/meet-ultisnips/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vimcasts.org/episodes/ultisnips-python-interpolation/&quot;&gt;http://vimcasts.org/episodes/ultisnips-python-interpolation/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vimcasts.org/episodes/ultisnips-visual-placeholder/&quot;&gt;http://vimcasts.org/episodes/ultisnips-visual-placeholder/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Écrire un snippet avec Ultisnips est assez similaire a la façon qu’ont les autres éditeurs de texte de le faire. Par exemple, a chaque fois que j’écris un article sur ce blog je remplis d’abord trois informations YAML puis un paragrapge, un tags de découpage pour la première page du site, et la suite de l’article, je peux donc écrire un snippet pour accélérer un tout petit peu les chose:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;snippet post&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;${1:post_kevin}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;$2&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;kevin&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;$3&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;&amp;lt;!--break--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;$4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On peut utiliser des petits bout de codes en Python, VimL ou Bash pour des utilisations plus complexes. Par exemple si je veut choisir un layout différent parmis ceux que j’ai sur mon site en utilisant une autocomplétion personnalisée je peux améliorer le snippet précédent:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;global !p&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;def complete(t, opts)&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;   &lt;span class=&quot;l-Scalar-Plain&quot;&gt;if t&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;l-Scalar-Plain&quot;&gt;opts = [m[len(t):] for m in opts if m.startswith(t)]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;   &lt;span class=&quot;l-Scalar-Plain&quot;&gt;if len(opts) == 1&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;l-Scalar-Plain&quot;&gt;return opts[0]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;   &lt;span class=&quot;l-Scalar-Plain&quot;&gt;return opts&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;snippet post&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;$1 `!p snip.rv = complete(t[1], [&amp;#39;post_kevin&amp;#39;, &amp;#39;index&amp;#39;, &amp;#39;autre_layout&amp;#39;, &amp;#39;etc...&amp;#39;])`&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;$2&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;kevin&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;$3&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;&amp;lt;!--break--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;$4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(code python honteusement piqué su site de l’auteur du plugin)&lt;/p&gt;

&lt;p&gt;Maintenant que j’ai réussi a l’installer je pense que je vais m’amuser à écrire des tonnes de snippets dans tous les sens et pour tout et n’importe quoi!&lt;/p&gt;

&lt;h2 id=&quot;vim-airline&quot;&gt;Vim-airline&lt;/h2&gt;

&lt;h4 id=&quot;ou-comment-rendre-linterface-de-vim-badass&quot;&gt;Ou comment rendre l’interface de Vim badass&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://bling.github.io/&quot;&gt;Site de l’auteur&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;: &lt;a href=&quot;http://vimawesome.com/plugin/vim-airline-sad-beautiful-tragic&quot;&gt;http://vimawesome.com/plugin/vim-airline-sad-beautiful-tragic&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;J’aime beaucoup ce plugin, mais j’ai eu aussi pas mal de difficultés à le faire marcher vraiment correctement jusqu’à récemment ou je me suis replongé dessus.
Le principal problème que  j’avais etait…qu’il ne m’obéissait pas du tout en fait! Le premier problème que j’avais venat du fait qu’il ne s’affciahait que lorsque j’avais au moins deux fenêtres Vim. Or en me baladant sur superuser.com j’ai trouvé cette commande a rajouter dans le vimrc:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;laststatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Si on regarde la documentation Vim correspondant à ce paramètre, on comprend que ça gère les cas dans lesquels la statusline doit s’afficher ou non, en mettant la valeur 2 on lui demande de s’afficher tout le temps, alors qu’avec la valeur 1 on lui demande de ne s’afficher que lorsqu’il y a au moins deux fenêtres.&lt;/p&gt;

&lt;p&gt;On peut ensuite configurer l’apparence de cette statusbar de deux façons. Soit en choisissant manuellement chacun des composants et leur apparence, soit en choisissant un thème avec la commande suivant:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;AirlineTheme&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Et en faisant défiler a l’aide de la commande Tab.
On peut déjà choisir les informations qui sont affichées dans la statusbar, pour ça vim-airline découpe la barre en &lt;strong&gt;Section&lt;/strong&gt;, qui sont nommées de a,b,c,x,y,z. Voici ma configuration:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; lastsatus&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:airline_powerline_fonts&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:airline_section_x&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;%{strftime(&amp;quot;%H:%M&amp;quot;)}&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:airline_section_y&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;%{char2nr(getline(&amp;quot;.&amp;quot;)[col(&amp;quot;.&amp;quot;)-1])}&amp;#39;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;quot;Pour obtenir la valeur ascii du caractère a la position du curseur&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:airline_section_z&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Line:%l Col:%c&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pour avoir les jolis affichages en flèches de vim-airline. il faut installer les polices de caractères de powerline. Pourquoi? Parce que ce sont des caractères en forme de flèche ou de branche ou tout un tas d’autres choses qui en fait ne vont pas servir à écrire du texte mais a affiner l’affichage. Pour l’installer il suffit d’aller sur la page &lt;a href=&quot;https://github.com/powerline/fonts&quot;&gt;Github de powerline&lt;/a&gt; et de lancer le install.sh du .zip téléchargé.&lt;/p&gt;

&lt;p&gt;Pour changer le thème de base:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:airline_theme&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;murmur&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Lorsque j’ai voulu pour la première fois changer de thème, je me suis rendu compte que je n’obtenais absolument pas les même résultats que sur les screenshots de Vim-airline. Avant de modifier les couleurs il fallait donc déjà qu’elles soient fonctionnelles! A force de farfouiller sur le net, j’ai compris qu’il y avait une variable liée a la gestion du nombre de couleurs dans Vim qui s’appelle t_Co, j’ai rajouté donc cette ligne dans mon vimrc:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;t_Co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;256&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Et victoire ça marche! En fait avant cette ligne ma valeur pour t_Co était de 8! Si cette variable est le nombre de couleurs de la fenêtre Vim, alors avant j’avais encore moins de couleur que Mario Bros sur arcade!(Et j’ai vérifié)&lt;/p&gt;

&lt;p&gt;Il me reste encore un bon paquet de plugins a traiter, mais au moins juste écrire cet article m’a permis de revoir pas mal de choses sur la configuration de Vim-airline et Ultisnips ce qui n’est pas plus mal (Pour l’histoire du lastsatus a 1 par défaut, je ne l’ai appris qu’hier)&lt;/p&gt;

&lt;p&gt;Si certaines personnes lisant cet article trouvent des choses à redire ou a rajouter n’hésitez pas mon adresse mail est dans l’onglet Contact, en attendant que les commentaires fonctionnent sur le site!&lt;/p&gt;

&lt;p&gt;@pluche&lt;/p&gt;
</description>
				<pubDate>Wed, 16 Sep 2015 00:00:00 +0200</pubDate>
				<link>http://ilphrin.com/planet/2015/09/16/topo-des-plugins-vim-01.html</link>
				<guid isPermaLink="true">http://ilphrin.com/planet/2015/09/16/topo-des-plugins-vim-01.html</guid>
			</item>
		
			<item>
				<title>Un nouveau blog tout beau avec Jekyll</title>
				<description>&lt;p&gt;Voilà j’ai enfin terminé de faire ce blog! Il sera passé par beaucoup d’étapes, mais le résultat vaut vraiment le coup. Principalement parce que c’est moi qui l’ai fait, en choississant a ma sauce chaque petit morceau. Je pense que la partie la plus dure n’a pas tant été l’apprentissage de Jekyll pour générer un site statique, mais plutôt le choix d’un design final pour ce site. Autant se l’avouer tout de suite: Je ne suis pas doué quand il s’agit de réfléchir au design d’un site web. Autant pour un logiciel il existe des bibliothèques qui définissent des menus, des canvas, des onglets etc… Autant dans le web c’est une galaxie de possibilités, a un tel point qu’on ne s’y retrouve plus.
&lt;!--break--&gt;&lt;/p&gt;

&lt;p&gt;Mais bon j’y suis finalement arrivé. Il manque encore quelques petite touches au site (je pense notamment aux commentaires, qui ne fonctionnenent pas du tout vous pouvez essayer vous ne verrez jamais votre commentaire s’afficher sur mon site, et aussi une petite liste des copains et autres sites a voir. Peut-être vais-je rajouter ça dans l’onglet Contact).&lt;/p&gt;

&lt;p&gt;Un peu de technique maintenant. Comme je l’ai mentionné, j’utilise Jekyll pour faire de la génération de code statique. Pour ceux qui ne savent pas, statique signifie (en gros) qu’il n’y a pas de code PHP, donc pas de gestion coté serveur. Vous avec de l’HTML, et du CSS. C’est quasiment tout ce qu’il y a sur ce site. Le gros avantage de Jekyll par rapport a ce que je voulais est qu’il est spécialisé pour la conception de Blogs, avec une gestion des articles qui sont écrit de mon coté en langage Markdown, puis sont transformé en page HTML/CSS par Jekyll selon un modèle que j’ai défini.&lt;/p&gt;

&lt;p&gt;Ah oui il faut en parler de ces modèles, ou plutôt appelé par Jekyll des Layouts. Pour générer du code avec Jekyll, on commence par écrire des pages qui serviront de modèles pour la génération, et en mettant dedans des commandes Jekyll pour lui donner des informations, comme lui dire a quel endroit insérer le contenu de la page qui utilise ce Layout. Un modèle peut être tout et n’importe quoi en HTML. Pour ce site j’utilise a peu près deux catégories de Layouts, d’un coté ceux qui contiennent le code de base d’une page HTML donc avec le DOCTYPE les balises &amp;lt;head&amp;gt; les lignes d’insertion de CSS etc… Agrémentés donc en plein milieu d’une ligne avec  pour placer le contenu de la page. Et d’un autre coté j’utilise des Layouts qui eux-mêmes sont derivés des Layouts de la première catégories.&lt;/p&gt;

&lt;p&gt;C’est le système que j’aime le plus avec Jekyll car ça permet de créer des modèles de pages au début, ce qui fait que pour la suite on a plus qu’à écrire le contenu qu’on veut et indiquer le modèle a utiliser. Non seulement ça simplifie la vie mais c’est en plus très facilement lisible quand on veut remettre les mains dans le cambouis. Par exemple quand j’écris cet article, j’écris un fichier de type Markdown, avec le contenu de mon article et le formattage que je veux faire (Jekyll s’occupe aussi de convertir le Markdown en HTML. Franchement, quel homme ce Jekyll!), et avec au début deux trois lignes d’information qui sont utilisées par Jekyll dont le Layout.&lt;/p&gt;

&lt;p&gt;Je pense que je vais conclure sur le fait que je suis vraiment satisfait des possibilités offertes par Jekyll. Il permet de facilement faire du code statique sans se casser la tête et surtout le rendu final est très performant puisqu’on n’a ni PHP ni Javascript pour faire tout ça. Mais après rien n’empêche de rajouter du PHP ou du Javascript! Par exemple sur ce site le bouton ‘Contact’ a une propriété HTML onclick qui lance une fonction Javascript pour afficher ou non la barre de Contact. J’ai aussi quelques lignes de PHP qui me permettent de gérer le formulaire d’envoi de commentaire, pour m’envoyer un mail avec le contenu et je n’ai plus qu’à rajouter ça au site (pas très pratique certes puisqu’il faut recopier le contenu du mail, le nom et l’article associé, dans le dossier _comments, mais apparemment il existe des ptits gars qui ont fait un script pour automatiser tout ça)&lt;/p&gt;

&lt;p&gt;Si vous voulez vous lancer dans la création d’un blog et que vous êtes débutant comme moi, Jekyll est vraiment un très bon outil pour faire ça.&lt;/p&gt;

&lt;p&gt;Gloire a Jekyll :3&lt;/p&gt;
</description>
				<pubDate>Fri, 04 Sep 2015 00:00:00 +0200</pubDate>
				<link>http://ilphrin.com/planet/2015/09/04/un-nouveau-blog-tout-beau-avec-jekyll.html</link>
				<guid isPermaLink="true">http://ilphrin.com/planet/2015/09/04/un-nouveau-blog-tout-beau-avec-jekyll.html</guid>
			</item>
		
			<item>
				<title>Neobot un bot en ligne de commande pour les unix like</title>
				<description>&lt;p&gt;Salut tout le monde&lt;/p&gt;

&lt;p&gt;Alors tout d’abord pour ceux qui ne le savent pas, qu’est-ce qu’un &lt;em&gt;bot&lt;/em&gt; en informatique? C’est un programme qui va se gérer tout seul pour accomplir une ou des tâches voulues par les développeurs du bot. Leurs utilisation est vaste, cela va du jeu vidéo (les ennemis d’un jeu de FPS contrôlés par l’ordinateur par exemple) à la gestion des salons de discussion IRC en passant par les bien connus spambots, vous savez les faux comptes inscris sur les forums de discussions simplement pour balancer de la pub en vrac… Pour en savoir plus, je vous invite à lire la page wikipédia sur les &lt;a href=&quot;https://fr.wikipedia.org/wiki/Bot_informatique&quot;&gt;bot informatique&lt;/a&gt;.&lt;/p&gt;

&lt;!--break--&gt;
&lt;p&gt;Il existe une catégorie de bot qui ont pour but de tenir une conversation en ayant l’air le plus possible humain, connu sous le nom de Chatbot. C’est sur cette catégorie de bot que l’on va s’attarder aujourd’hui avec &lt;a href=&quot;http://dcjtech.info/topic/neobot-v1-0b-release/&quot;&gt;Neobot&lt;/a&gt;. C’est un logiciel développé par Devyn C. Johnson (dont j’ai déjà parlé ici, rappelez-vous les articles sur le &lt;a href=&quot;http://mintic.blog4ever.com/blog/linux-kernel-introduction&quot;&gt;Kernel Linux&lt;/a&gt;), dont le coeur du programme est développé en Python3, pour quelque détails supplémentaires sur les outils utilisé, vous pouvez regarder &lt;a href=&quot;https://www.chatbots.org/chatbot/neo/&quot;&gt;ICI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Neobot est portable, c’est-à-dire qu’il n’a pas besoin d’être installé pour être lancé. Une fois téléchargé et dezippé, vous pouvez lancer directement l’executable appelé Betabot. Il faut attendre quelques secondes pour que le Neobot soit totalement lancé. Lorsque que c’est le cas il devrait vous afficher un message de bonjour. Voilà vous pouvez commencer à discuter avec lui (uniquement en anglais pour le moment)&lt;/p&gt;

&lt;p&gt;Je trouve ce bot particulièrement intéressant pour deux raisons principalement: la première est que, malgré le fait que ce soit écrit en python qui est un langage haut niveau, Neobot est assez performant. Il utilise un format de base de données crée spécialement pour cette catégorie de bot appelé Xaiml.&lt;/p&gt;

&lt;p&gt;La deuxième est que vous pouvez poser des questions sur votre pc a Neobot et il pourra vous repondre. Par exemple si vous lui demandez de lancer Firefox et bien il ira chercher Firefox et le lancera pour vous. Vous pouvez aussi demander des inforomations sur votre système. Par exemple si vous lui demandez “Where am I” il vous repondra par le dossier courant dans lequel vous êtes dans votre temrinal.&lt;/p&gt;

&lt;p&gt;Si vous souhaitez voir un peu les autres projets sur lesquels Devyn C.Johnson a travaillé ou même en discuter, vous pouvez aller jeter un coup d’oeil sur &lt;a href=&quot;http://dcjtech.info/&quot;&gt;http://dcjtech.info&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Bonne journée à tous!&lt;/p&gt;
</description>
				<pubDate>Fri, 30 Jan 2015 00:00:00 +0100</pubDate>
				<link>http://ilphrin.com/planet/2015/01/30/neobot-un-bot-en-ligne-de-commande-pour-les-unix-like.html</link>
				<guid isPermaLink="true">http://ilphrin.com/planet/2015/01/30/neobot-un-bot-en-ligne-de-commande-pour-les-unix-like.html</guid>
			</item>
		
			<item>
				<title>Premiers pas dans le développement de Firefox OS</title>
				<description>&lt;p&gt;Salut tout le monde!&lt;/p&gt;

&lt;p&gt;Comme je le disais dans &lt;a href=&quot;/2015/01/22/changer-de-homescreen-dans-firefox-os.html&quot;&gt;mon précédent article&lt;/a&gt;, il existe plusieurs applications pour changer son homescreen, mais elles datent toutes
 de plusieurs jour/mois et ne sont, pour la plupart, plus fonctionnelles. Je me suis donc dit que j’allais regarder l’un des projets que j’ai présenté et essayer de le patcher pour le faire fonctionner.
&lt;!--break--&gt;
J’ai choisi l’application &lt;a href=&quot;https://github.com/mgoodings/zwipe&quot;&gt;Zwipe&lt;/a&gt;, d’une part parce que les screenshots donnaient l’impression d’une application assez sympa ésthétiquement, et d’autre part car Zwipe
 fonctionne à l’aide du framework AngularJS, sur lequel j’avais déjà essayé de travailler il y a quelques semaines mais sans résultat. Pour (ré-)apprendre à utiliser AngularJS, je me suis aidé de &lt;a href=&quot;http://www.grafikart.fr/formations/angularjs&quot;&gt;ce cours
sur Graphikart &lt;/a&gt; qui explique vraiment très bien son fonctionnement&lt;img src=&quot;/images/zwipe1.png&quot; alt=&quot;Zwipe1&quot; style=&quot;float:right&quot; /&gt;.Je suppose que vous connaissez déjà
AngularJS ou que vous venez de regarder le cours que je viens de mettre en lien, sinon il y aura plusieurs points dans cet article que vous risquez de ne pas comprendre.&lt;/p&gt;

&lt;p&gt;Bon alors déjà première étape, ouvrir WebIDE. Pour ceux qui ne le savent pas WebIDE est un outil dans le navigateur Firefox pour le développement sous Firefox OS, il est mis par défaut dans Firefox
Developper Edition. Une fois ouvert, il faut cliquer sur “Open Packaged app”, puis sélectionner le dossier de zwipe que l’on vient de télécharger. Ensuite on sélectionne comme runtime son téléphone et on
installe l’application. On tombe sur ce qui est montré à sur l’image ci-contre. On voit…bah pas grand chose, mais l’oeil avisé aura remarqué le petit 1 dans son cadre rouge en bas à droite. Il faut donc
maintenant aller dans WebIDE et faire “Debug App” (ou appuyer sur F12).&lt;/p&gt;

&lt;p&gt;La Console nous donne ce message d’erreur “Error: $scope is undefined”, ce qui est un peu dommage vu qu’AngularJS fonctionne principalement à l’aide de cette variable. Donc on ouvre son éditeur de texte
favori et on va ouvrir les fichiers qui nous intéressent: /index.html et /js/app.js. Le fichier index.html nous apprend trois choses importantes. Premièrement le Module est nommé dans la balise html et
s’appelle &lt;u&gt;zwipe&lt;/u&gt;, deuxièmement le Controller dans lequel l’application travaille s’appelle &lt;u&gt;ZwipeCtrl&lt;/u&gt;, et enfin on sait qu’il existe un tableau de variables &lt;u&gt;apps&lt;/u&gt;, qui contient les applications et les
informations qui leurs sont liées.&lt;/p&gt;

&lt;p&gt;Bon maintenant regardons le fichier app.js. On a une première grosse fonction anonyme au début de ce fichier qui contient une fonction DashApplication, nous en reparlerons un peu plus tard, sachez simplement
qu’elle s’occupe de récupérer les données des applications installées pour nous. Juste après on a ce qui nous intéresse, c’est-à-dire la création du module &lt;u&gt;zwipe&lt;/u&gt;.&lt;/p&gt;

&lt;p&gt;Dedans on y distingue deux gros groupes plus une config:  une Factory qui s’appelle &lt;u&gt;AppService&lt;/u&gt;, et la définition du Controller &lt;u&gt;ZwipeCtrl&lt;/u&gt;. Dans ce dernier on a la définition de la function avec les variables
qui vont bien en deuxième paramètre, et notamment la fameuse variable $scope! Donc on la met bien en paramètre, pourquoi est-elle marqué comme indéfinie alors???  Si vous venez tout juste de regarder le
cours sur Graphikart, vous aurez peut-être une information essentielle enore fraîche dans votre esprit. Parfois le code d’une page web peut être amené à subir une opération de &lt;strong&gt;minimisation&lt;/strong&gt; afin d’optimiser
l’application/la page. Problème: cela passe parfois par un renommage des variables! Ainsi notre variable en paramètre n’est probablement plus la bonne :/ Donc pour pouvoir pallier à ce problème, on change un
peu le format du deuxième paramètre du Controller, pour le transformer en tableau!&lt;/p&gt;

&lt;p&gt;Et donc dans ce tableau on va mettre d’une part 3 chaines de caractère dans lequel on va copier chacun des paramètres de la fonction (autant le faire pour les trois paramètres, vu que le problème risque
d’être le même pour tout les paramètres ;) ), puis d’autre part en 4e paramètre la fonction en elle-même qui ne change pas. Au fait, nous avions aussi une Factory non? Peut-être doit-on lui faire subir la
même opération? Et bien effectivement! Donc rebelote avec la Factory ZwipeCtrl, on fait un tableau pour contenir la variable $q. Et surtout on oublie pas de fermer les crochets à la fin de la Factory.&lt;/p&gt;

&lt;p&gt;Si tout s’est passindex2.pngé comme il faut on se trouve avec ce qu’il y a à la capture d’écran à gauche. C’est déjà plutôt cool! Mais on voit apparaitre du coup un deuxième problème qui nous était invisible
avant. La plupart des icones sont remplacées par une icone par défaut, alors qu’elle fonctionnaient bien sur le Homescreen de base (enfin, je le suppose, si ce n’est pas le cas chez vous c’est dommage ;) ).
Bon, ça siginifie qu’on a un problème à la récupération des données des applications. Ça tombe bien on a une function qui s’en occupe: DashApplication! Quand on regarde son code dans le fichier app.js on
voit qu’il y a tout un tas de “sous-fonctions” pour récupérer certaines données, notamment une pour les icones. S’il existe un objet &lt;u&gt;this.manifest.icons&lt;/u&gt; alors on récupère la case ‘60’ dans cet objet, qui
contient le chemin vers l’image d’une taille de 60 pixel.&lt;/p&gt;

&lt;p&gt;Or si on regarde les icones pour les autres applications, toutes n’ont pas une icone de taille 60. On va devoir changer légèrement ce code. On initialise une variable i à 60, et on va la faire travailler
dans une boucle while, disons jusqu’à que i soit supérieur à 512. Pour chaque valeur jusqu’à 512 on va regarder si this.descriptor.icons[i] vaut quelque chose, si c’est le cas alors on a une icone et on le
retourne, sinon on incrémente de 2 et on recommence. Si à 512 on a vraiment rien trouvé alors là on renvoie null. Cette petite boucle pourra nous permettre de recupérer à peu près toutes les icones, sauf
celles qui pourraient être un peu exotique ( inférieure à 60 pixel ou supérieure à 512).&lt;/p&gt;

&lt;p&gt;Une nouvelle capture pour voir ce que ça donne?  Pas tout de suite car voici que nous avons encore des problèmes! Même si déjà ça s’améliore grandement ^^ Le premier problème est un texte incompréhensible
balancé en erreur dans la console, le deuxième est que certaines icones sont du coup sont plus
petites que d’autre, et c’est moche. Pour le premier problème je vais l’expliquer en accéléré parce que je ne me souviens pas de ce qui m’avais permis de me rendre compte de ce problème. En fait il y a une
application pour le thème par défaut de gaia, et elle ne dispose pas d’icone. Mais de toutes façon on n’en veut pas de cette “application” qui n’en est pas vraiment une. On retourne dans la Factory, et là on
a une variable &lt;u&gt;hiddenRoles&lt;/u&gt;, dans laquelle on va rajouter le role “theme”. Le role dans une application Firefox OS sert à définir ce que fait en gros l’application, il n’existe pas beaucoup de role pour
l’instant, alors beaucoup n’ont pas de rôles, et d’autres en ont pour un but bien précis, mais du coup ne sont pas des applications utilisable en tant que tel.
Pour le deuxième problème &lt;img src=&quot;/images/zwipe2.png&quot; alt=&quot;Zwipe2&quot; style=&quot;float:left&quot; /&gt;, en fait on peut simplement ajouter un style à la balise html qui contient l’image, pour luindex3.png, fixer une taille. Donc dans
index.html à la balise &lt;img /&gt; on rajoute un petit style=”width 70px; height: 70px”. C’est une valeur arbitraire on peut mettre ce que l’on veut ^^ À droite vous pouvez voir le résultat que l’on devrait
obtenir une fois tous ce bazar corrigé.
Victoire! Nous voilà avec une applications exploitable!&lt;/p&gt;

&lt;p&gt;Avec un peu de travail, et d’acharnement on a donc pu corriger les petit soucis d’une application utilisant un framework, et qui utilise les fonctions de récupérations de données des applications Firefox OS.
Bien sûr elle n’est pas encore parfaite, mais quelle applications pourrait se targuer de l’être ;)&lt;/p&gt;

&lt;p&gt;J’espère que cet article vous a plu, et plus important encore vous aura montré que parfois il suffit de pas grand chose pour faire planter une application, mais qu’on peut tout à fait y corriger pour peu
qu’on accepte d’y mettre le temps qu’il faut. J’ai personellement mis environ deux jours entier (du réveil au coucher à peu près) pour trouver et corriger ces bugs, et je suis un grand débutant dans le
domaine. N’hésitez pas à fouiller cette application pour comprendre un peu comment elle fonctionne et comment exploiter certaines fonctionnalité des API Firefox OS. J’ai forké ce projet pour faire mes
bidouilles mais aussi rajouter mes petits trucs, si ça intéresse quelqu’un mon fork est &lt;a href=&quot;https://github.com/Ilphrin/zwipe&quot;&gt;ICI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sur ce, je vous souhaite une agréable journée, pleine de bidouilles et de renards qui flambent.&lt;/p&gt;
</description>
				<pubDate>Sun, 25 Jan 2015 00:00:00 +0100</pubDate>
				<link>http://ilphrin.com/planet/2015/01/25/premiers-pas-dans-le-developmment-d-applications-firefox-os.html</link>
				<guid isPermaLink="true">http://ilphrin.com/planet/2015/01/25/premiers-pas-dans-le-developmment-d-applications-firefox-os.html</guid>
			</item>
		
			<item>
				<title>Changer de homescreen dans Firefox OS</title>
				<description>&lt;p&gt;Salut tout le monde!&lt;/p&gt;

&lt;p&gt;En discutant hier soir soir sur le salon #BuildOpenCEu, dattaz m’expliquait qu’il est possible sur Firefox OS de changer de Homescreen, l’écran d’accueil en français, pour quelque chose d’entièrement différent, du menu vertical ou horizontal jusqu’au cercle d’application que l’on peut faire tourner avec un mouvement de doigt. J’en ai donc essayé plusieurs  sur mon Open C et voilà ce que ça m’a donné pour chacun d’eux. Je tiens à rappeler que je suis en version Nightly que je met à jour chaque matin, donc il se peut que certains marchent mieux sur votre version de Firefox OS que sur la mienne, le mieux étant d’avoir au moins un test pour chaque version majeure de l’OS. Je m’excuse d’avance pour le manque de Screenshot, d’un part je n’ai pas pensé à en faire et de l’autre étant en Nightly et n’ayant pas encore de carte microSD je ne peux pas enregistrer de capture d’écran sur le téléphone.
&lt;!--break--&gt;&lt;/p&gt;

&lt;p&gt;Les homescreen peuvent être trouvés &lt;a href=&quot;https://gist.github.com/xfausto/7c954f1b31cf086aff79&quot;&gt;ICI&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mgoodings/zwipe&quot;&gt;Zwipe&lt;/a&gt;: Celui que je trouve le plus intéressant, il est censé afficher l’heure et la date au milieu de l’écran ainsi que les applications sous forme de cercle en bas. Il se lance mais n’affiche rien à part un bout de code en guise de titre. Dans le débugger on peut voir que la variable $scope est indéfinie, cette dernière est essentielle pour le framework AngularJS utilisé pour cette appli.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xfausto/Grayscreen&quot;&gt;Grayscreen&lt;/a&gt;: Une interface simple et plutôt jolie, censé ne fonctionner que pour la 1.4 mais je l’ai testé quand même en 2.2 pour voir, et bien entendu elle ne fonctionnait pas vraiment. On a un fond blanc et la date et l’heure s’affichent correctement à droite mais c’est tout.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/yorikvanhavre/MARSScreen&quot;&gt;Marsscreen&lt;/a&gt;: J’accroche pas du tout à celle-ci, la police de caractère n’est pas top et cela semble un peu flou. Néanmoins elle fonctionne à peu près, on a simplement pas les icones du coup toutes les applications ne s’affichent que par leur nom ce qui n’est pas très pratique. Si ça peut en intéresser certains, il n’y a surement pas grand chose à modifier pour faire afficher les icones.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Schoewilliam/Shyhome&quot;&gt;Shyhome&lt;/a&gt;: Cette application ne va pas révolutionner l’interface, mais au moins elle fonctionne à peu près et est agréable à l’oeil, avec un bon fond d’écran ça doit bien rendre.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xfausto/betsuscreen&quot;&gt;Betsuscreen&lt;/a&gt;: Celle-ci est plutôt prometteuse si on en croit les screenshot, avec une interface qui revient à la mode horizontale des versions 1.x, mais sur mon téléphone je n’ai droit à rien d’autre qu’un écran blanc, dommage…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Voilà ce sont les principaux que j’ai essayé, n’hésitez pas à les essayer vous aussi  pour faire des retour, certaines fonctionneront peut-être mieux avec des version différentes.&lt;/p&gt;

&lt;p&gt;Pour ceux qui se posent la question (comme moi ^^), pour tester ces homescreen il suffit de dezipper le paquet téléchargé sur la page github en question, et de faire “Open Packaged app” dans le WebIDE de Firefox, ensuite vous lui demandez de se connecter à votre téléphone (au moment de la sélection, Firefox OS vous demandera une confirmation pour cette connexion) et ensuite de faire “Install and run” avec le bouton en forme de flèche en haut de la fenêtre.&lt;/p&gt;

&lt;p&gt;Voilà c’est tout pour aujourd’hui, si d’autres personnes ont des homescreen à proposer ou que vous auriez trouvé, n’hésitez pas à m’en faire part dans les commentaires!&lt;/p&gt;

&lt;p&gt;Bonne journée à tous!&lt;/p&gt;

&lt;p&gt;PS: J’ai cru comprendre qu’on pouvait demander à WebIDE de faire une capture d’écran, je modifierai l’article pour ajouter des captures à l’occasion ^^&lt;/p&gt;
</description>
				<pubDate>Thu, 22 Jan 2015 00:00:00 +0100</pubDate>
				<link>http://ilphrin.com/planet/2015/01/22/changer-de-homescreen-dans-firefox-os.html</link>
				<guid isPermaLink="true">http://ilphrin.com/planet/2015/01/22/changer-de-homescreen-dans-firefox-os.html</guid>
			</item>
		
			<item>
				<title>Firefox OS 4 mois après son utilisation</title>
				<description>&lt;p&gt;Salut tout le monde!&lt;/p&gt;

&lt;p&gt;Depuis quelques temps sur diaspora* je demande un peu d’aide ou pose des questions par rapport à Firefox OS, car depuis le mois d’Aout j’ai fais la main base sur un Open C!&lt;/p&gt;

&lt;p&gt;Il faut savoir que depuis mon arrivé au lycée, il y a 4 ans, je suis resté avec un Samsung à clapet gris. Il me convenait très bien pour ce que j’en faisais, c’est-à-dire du sms en masse et très vite (j’enverrais une tartelette à la fraise au gars qui à inventé le T9) et puis c’est tout. Je ne m’intéressais absolument pas aux smartphones pour plusieurs raisons. La principale était le manque d’utilité que je pouvais accorder à ces gadgets. Pourquoi avoir une application pour lire mes mails quand je peux les lire des chez moi sous Thunderbird avec un écran qui me fasse pas plisser les yeux?
&lt;!--break--&gt;&lt;/p&gt;

&lt;p&gt;La deuxième raison venait du prix, parce que un petit téléphone à 20€ que je garde 3 ans c’est plus rentable qu’un smartphone à 100€ que je change tous les 6 mois parce que l’OS à été mis à jour et le téléphone ne marche plus trop bien avec.&lt;/p&gt;

&lt;p&gt;Mais mon avis à changé quand j’ai entendu parler de l’Open C l’été dernier. Bon je ne vais pas refaire tout le speech habituel sur le fait d’avoir la possibilité de faire du libre sur les téléphones etc… Donc pour résumer j’ai trouvé ça super cool. Je l’ai donc commandé. Première chose que j’ai fait: Me balader sur le net pour voir qu’est-ce qu’on pouvait bidouiller dessus. Une semaine après je suis passé sous Firefox OS 1.4, et encore une semaine après en version 2.1, version que j’ai toujours à l’heure où j’écris cet article.&lt;/p&gt;

&lt;p&gt;En tant que tout premier smartphone, je suis clairement satisfait de l’Open C et de son OS! La première chose qui m’a plu c’est le fait que l’interface soit vraiment intuitive, avec un assistant d’utilisation qui explique tout ce  qu’il faut pour utiliser son téléphone correctement. Lorsque j’ai voulu comparer avec des téléphone sous Android ou iOS il y a quelque chose qui m’a marqué aussi et j’ai trouvé ça formidable: Pas besoin de se faire de compte pour aller sur le Marketplace. On veut une appli? On cherche, on trouve, on télécharge, point. Je me souviens avoir passé deux heures avec une amie pour l’aider à se faire un compte pour utiliser iOS comme elle le voulait, en ayant abandonné au final parce que ça me cassait les pieds.&lt;/p&gt;

&lt;p&gt;Maintenant que j’ai pris un peu mes marques dans le monde des études supérieures, j’ai commencé à m’intégrer à diverses activités en rapport avec le Web pour pouvoir à terme développer des applications sous Firefox OS, car on est encore très loin des &lt;a href=&quot;http://fr.wikipedia.org/wiki/Google_Play&quot;&gt;800000 applications d’Android il y a deux ans&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mon objectif à court terme est d’arriver à développer des sites web qui respectent le responsive design pour pouvoir les tester dans le navigateur de Firefox OS et acquérir les bases du développement Web. J’ai réussi à convaincre un ami de ma promo autant intéressé que moi par Firefox OS à se prendre un Open C. (Le fait d’avoir cassé son HTC en voulant installer Firefox OS dessus l’a beaucoup aidé à passer le cap) Nous travaillons sur un projet que nous avions tenté de faire sans succès lors de l’événement de la &lt;a href=&quot;http://www.nuitdelinfo.com/&quot;&gt;Nuit de l’Info&lt;/a&gt;, et nous essayerons de faire une application lui correspondant pour Firefox OS.&lt;/p&gt;

&lt;p&gt;À moyen et long terme j’espère pouvoir convaincre l’association de développement web de mon bahut de l’importance de cet OS, et pouvoir proposer et travailler sur divers projets d’application. On pourrait même organiser des évènements ouverts à la promo pour leur parler de nos idées et pour promouvoir Firefox OS.&lt;/p&gt;

&lt;p&gt;Si tout ça est possible, je pense que je vais bien m’amuser. J’ai déjà noté deux trois petites choses dites sur le web concernant Firefox OS qu’il serait intéressant d’intégrer. Mais bon comme je le disais ce sont des objectifs, je n’arriverai peut-être pas à aller jusque là mais en tout cas ce sont ces buts finaux que je me fixe.&lt;/p&gt;

&lt;p&gt;Sinon c’est dommage que tout ce qui n’est pas en rapport avec le code ne soit pas mis un peu plus en avant. Je veux dire au niveau de la communication. Même si il est possible de bidouiller cet OS et que parfois il faut chercher un bon moment dans la doc pour faire ce que l’on veut, il reste largement accessible pour un utilisateur “lambda”. Et je pense qu’il serait bien de viser les personnes n’ayant jamais eu de smartphone dans les mains puisque son gros avantage c’est la simplicité dans l’utilisation basique par rapport à ses concurrents. Quand je parle d’utilisation basique c’est: SMS, MMS, appels et pourquoi pas musique et vidéos. Pour en revenir à la communication ce serait bien d’organiser des journées de présentation, en plus de ce qui est déjà fait avec E.Leclerc. Je prends l’exemple de Lyon, je n’ai rien vu concernant Firefox OS dans le coin, pourtant il y aurait surement quelque chose à faire, en plus il me semble que sur Diaspora* il y a une bonne petite communauté Lyonnaise. Ou peut-être est-ce simplement parce que je n’ai pas su regarder du bon coté. A creuser.&lt;/p&gt;

&lt;p&gt;Pour  conclure sur mon utilisation de ce téléphone, je dirais qu’il n’y a pas tellement de choses qui ont changées depuis mon Samsung à clapet. Il y a toujours 80% de l’utilisation de mon téléphone qui passe dans les SMS, 15% restant pour  la musique, chose que je ne faisais pas avant. Les 5% restant sont les jeux, que je teste plus qu’autre chose, pour me donner une idée de ce qu’il est possible de faire  en langage Web. À l’occasion j’irais chercher le code source de certaines applications pour voir comment ça fonctionne vraiment sous le capot.&lt;/p&gt;

&lt;p&gt;Si il y a des personnes qui ont déjà développé sous Firefox OS je suis preneur d’infos sur le sujet! ;)&lt;/p&gt;
</description>
				<pubDate>Sun, 14 Dec 2014 00:00:00 +0100</pubDate>
				<link>http://ilphrin.com/planet/2014/12/14/firefox-os-4-mois-apres-son-utilisation.html</link>
				<guid isPermaLink="true">http://ilphrin.com/planet/2014/12/14/firefox-os-4-mois-apres-son-utilisation.html</guid>
			</item>
		
			<item>
				<title>Tuxle Triad et Pygame: Avoir une main</title>
				<description>&lt;p&gt;Salut à tous!&lt;/p&gt;

&lt;p&gt;Me voilà aujourd’hui pour un deuxième article sur Pygame. Je vais cette fois-ci vous expliquer comment créer une “main” remplie de cartes tirées aléatoirement, et positionner les cartes dans la main.&lt;/p&gt;

&lt;p&gt;La dernière fois je vous avais expliqué comment fonctionnait un objet &lt;strong&gt;Card&lt;/strong&gt;. Mais pour pouvoir jouer il en faudra plus d’une (ça risque d’être quelque peu ennuyant sinon ;) ). Ceux qui ont essayé le jeu savent combien de carte il faut, c’est-à-dire 5 par joueur. Pour faire ça nous allons utiliser tout simplement une liste. Dans la fonction &lt;strong&gt;__init__&lt;/strong&gt; du fichier  game.py, on peut voir les deux lignes suivantes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;self.player1Hand = self.randomHand(1)

self.player2Hand = self.randomHand(-1)
&lt;/code&gt;&lt;/pre&gt;

&lt;!--break--&gt;
&lt;p&gt;Je vais expliquer juste après ce qui est à gauche de chaque opérateur =. Je fais donc appel à une fonction r&lt;strong&gt;andomHand()&lt;/strong&gt;, qui appartient à la classe &lt;strong&gt;Application&lt;/strong&gt;. En descendant plus loin dans le fichier (dans les alentours de la ligne 500 à l’heure de l’écriture de cet article), on trouve la définition de cette fonction qui prend le paramètre &lt;strong&gt;player&lt;/strong&gt;. Ce paramètre doit valoir 1 ou -1.&lt;/p&gt;

&lt;p&gt;La ligne la plus importante dans cette fonction est &lt;strong&gt;listCards = [card for card in range(len(allCards))]&lt;/strong&gt;. Cette ligne va répertorier toutes les cartes existantes par un numéro correspondant à leur position dans la liste &lt;strong&gt;allCards&lt;/strong&gt; (qui est créée dans le fichier &lt;u&gt;listOfCards.py&lt;/u&gt;). Ensuite avec la fonction &lt;strong&gt;random.shuffle(listCards)&lt;/strong&gt;, on va mélanger tous ces numéros.&lt;/p&gt;

&lt;p&gt;La boucle &lt;strong&gt;for&lt;/strong&gt; de la fonction va passer 5 fois. A chaque fois, on va prendre le premier numéro de la liste, créer une carte correspondant au numéro de cette liste, l’ajouter à une liste de carte nommée &lt;strong&gt;Cards&lt;/strong&gt; (avec un ‘s’, ce n’est pas l’objet &lt;strong&gt;Card&lt;/strong&gt;) au début, puis supprimer le numéro qu’on a pioché de la liste de numéro. &lt;strong&gt;Cards&lt;/strong&gt; va donc contenir 5 cartes prises aléatoirement dans la liste. Enfin la fonction retourne un objet &lt;strong&gt;Hand&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;On va donc voir maintenant ce qu’est ce fameux objet &lt;strong&gt;Hand&lt;/strong&gt;. Pour cela on va changer de fichier et aller jeter un oeil du coté du fichier &lt;strong&gt;Hand.py&lt;/strong&gt;.  Bon déjà soulagement: il y a moins de 30 lignes de code à lire ;). Sinon, petite explication de l’utilité de cet objet &lt;strong&gt;Hand&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Tout d’abord on enregistre la liste de cartes dans l’instance d’objet &lt;strong&gt;Hand&lt;/strong&gt;. Ensuite on va faire une boucle pour parcourir chacune des cartes de cette liste, et on va à chacune donner des coordonnés pour la placer dans la fenêtre du jeu.&lt;/p&gt;

&lt;p&gt;Petite piqûre de rappel, les coordonnés dans une fenêtre fonctionnent par paires. L’abscisse X et l’ordonnée Y, qui respectivement déterminent la colonne et la ligne du pixel indiqué. On va donc à chaque fois modifier la position du centre de l’objet &lt;strong&gt;Rect&lt;/strong&gt; de la carte (rappelez-vous j’en ai parlé dans &lt;a href=&quot;/2014/08/17/introduction-a-pygame.html&quot;&gt;l’article précédent&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pygame01.png&quot; alt=&quot;Pygame01&quot; style=&quot;float:left&quot; /&gt;En abscisse X, il n’y a que deux valeur possible, selon si l’on est le joueur 1 ou 2 (ou plutôt en l’occurrence, -1 dans le code du jeu, c’est simplement plus facile à gérer d’appeler le joueur 2 par -1), 60 ou 740.&lt;/p&gt;

&lt;p&gt;En ordonnée Y c’est un poil plus compliqué mais pas tant que ça, en fait on prend une position de base, et à chaque fois que l’on parcourt un tour de boucle on veut que la carte suivante soit affiché plus bas, donc on la décale de I*DELTA, I étant le numéro de la carte traitée et DELTA la différence de pixel entre chaque carte.
L’avant dernière ligne est une petite subtilité pour la gestion d’évenement. En fait pour chaque carte on va recréer un objet &lt;strong&gt;Rect&lt;/strong&gt; avec les mêmes valeurs qu’avant SAUF pour la hauteur de l’objet rect qui sera fixé à la valeur DELTA. Pourquoi cela?&lt;/p&gt;

&lt;p&gt;Je n’ai pas encore parlé de la gestion des clics mais c’est assez simple à se représenter. Imaginons que l’on garde les valeur de base, lorsque dans le jeu je vais vouloir cliquer sur une carte, le programme va comparer la position de la souris au moment du clic avec celle des cartes pour voir sur laquelle j’ai cliqué. Mais du coup les cartes se superposent partiellement, et donc si je clique en haut de la deuxième carte, du point de vue du programme j’aurais aussi cliqué sur la carte du dessus qui est légèrement cachée. Et ca va être un bazar pas possible à gérer à chaque fois qu’on voudra poser une carte car il risque de poser celle du dessus.&lt;/p&gt;

&lt;p&gt;Donc pour palier a cela on réduit virtuellement la taille de l’objet &lt;strong&gt;Rect&lt;/strong&gt; de la carte pour qu’il ne s’occupe que d’une partie de la carte lorsque l’on clique. Cela implique un défaut: Si on clique en bas de la dernière carte il ne fera rien puisque ce n’est pas sur l’objet &lt;strong&gt;Rect&lt;/strong&gt;. Je n’ai pour le moment pas encore trouvé de solution convenable à cela. Mais si quelqu’un à une solution à me proposer qu’il se dévoue ;)&lt;/p&gt;

&lt;p&gt;Nous avons donc fait le tour de la question concernant la création d’une main entière de cartes. Voilà tout ce qui se passe quand on lance dans le fichier &lt;u&gt;game.py&lt;/u&gt; les deux lignes de code indiquées en haut de l’article. &lt;strong&gt;self.player1Hand&lt;/strong&gt; et &lt;strong&gt;self.player2Hand&lt;/strong&gt; ne sont donc que des instance d’objet Hand correspondant respectivement au joueur 1 et 2.&lt;/p&gt;

&lt;p&gt;Et vu que c’est la grosse mode du moment, j’ai rejoint Diaspora&lt;em&gt;! Et je dois avouer que je suis sous le charme, à un tel point que je n’utilise presque plus Facebook. Je vais essayer de mettre des news de mes articles à propos de Pygame et Tuxle Triad ainsi que son développement sur Diaspora&lt;/em&gt;, que vous pourrez donc suivre avec  #pygame, dont je suis le seul et unique participant pour l’instant! x) N’hésitez pas à me faire de remarques sur l’article ou même sur mon jeu, si vous l’avez essayé sous tout les angles et que vous avez des porpositions d’ajout et d’améliorations à me faire. ;)&lt;/p&gt;

&lt;p&gt;Je ne sais pas encore sur quoi je vais partir pour le prochain article. Surement la gestion des cases sur le terrain. Mais mes cours ayant prit une grande partie de mon temps je ne sais pas encore quand est-ce que je pourrais l’écrire. Je vais aussi surement faire de légères modifications d’apparence des articles pour rendre plus visible  certaines choses, comme les lignes de code que je met entre balises de citation. Faites-moi savoir si vous avez des idées là-dessus parce que je suis pas très doué pour tout ce qui touche à l’apparence. ^^&lt;/p&gt;

&lt;p&gt;Sur ce je vous souhaite bonne journée à tous et à la prochaine!&lt;/p&gt;
</description>
				<pubDate>Fri, 17 Oct 2014 00:00:00 +0200</pubDate>
				<link>http://ilphrin.com/planet/2014/10/17/tuxle-triad-et-pygame-avoir-une-main.html</link>
				<guid isPermaLink="true">http://ilphrin.com/planet/2014/10/17/tuxle-triad-et-pygame-avoir-une-main.html</guid>
			</item>
		
			<item>
				<title>Introduction à Pygame</title>
				<description>&lt;p&gt;Salut tout le monde!&lt;/p&gt;

&lt;p&gt;Cela fait un bon moment que j’étudie la programmation, j’ai d’abord commencé par le C pour le C++, et même les langages web. Mais ce n’était que de la théorie et je voulais essayer de créer mon propre petit programme, et j’ai découvert le langage Python il y a environ 1 an grâce au célèbre livre &lt;a href=&quot;http://python.developpez.com/cours/apprendre-python3/&quot;&gt;Apprendre à programmer avec Python 3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mais encore une fois je n’avais rien crée moi-même, je n’avais pendant longtemps fait que la théorie, même si ce livre propose tout un tas d’applications du cours, ce n’était pas de moi que venaient les idées ni le gros du code.  Il y a plusieurs semaines je me suis donc lancé dans une tentative de faire mon propre programme, et plus exactement un jeu, et pour cela j’ai dû apprendre à utiliser la bibliothèque &lt;a href=&quot;http://www.pygame.org/news.html&quot;&gt;Pygame&lt;/a&gt;.
&lt;!--break--&gt;
Petite présentation de la bibliothèque: Pygame est une surcouche pour Python à SDL. On y retrouve absolument toutes les fonctionnalités, ainsi si vous avez déjà travaillé avec SDL, par exemple en C, vous ne serez pas destabilisé. La communauté est très grande et avec le chat IRC ont peut très rapidement recevoir de l’aide. Vous pouvez même, une fois votre programmation entamée, faire une petite page sur le site de Pygame pour le faire découvrir aux autres programmeurs et avoir/donner de nouvelles idées.&lt;/p&gt;

&lt;p&gt;Pygame est une librairie vraiment complète et puissante. Pour apprendre à l’utiliser la plupart des tutoriaux vont faire un pas-à-pas pour coder tel ou tel petit jeu, et avec une explication suffisante pour comprendre à quoi sert tel objet dans tel programme. (A ce propos je conseille la lecture de “Making Game with Python and Pygame”.)  Je n’ai pas la prétention de pouvoir faire mieux, ce que je veux essayer de faire avec cet/ces article c’est d’essayer d’expliquer certains mécanismes qui m’ont permis de coder mon jeu, comme par exemple la gestion du menu, les animations, etc… Au moins cela aura l’avantage d’être en français, parce qu’on peut dire ce que l’on veut, c’est quel que soit le niveau de maitrise on se sent bien plus à l’aise dans sa langue natale! (Enfin pour mon cas ;) )&lt;/p&gt;

&lt;p&gt;Quelques petits liens de documentation sur Pygame:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://python.developpez.com/cours/apprendre-python3/&quot;&gt;Apprendre à programmer avec Python 3&lt;/a&gt;  comme je le disais quelques lignes plus haut, pour ceux qui n’ont pas de base en Python.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://inventwithpython.com/&quot;&gt;Invent With Python&lt;/a&gt; pour apprendre à utiliser PyGame (mais pas que!).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.pygame.org/docs/&quot;&gt;La doc de Pygame&lt;/a&gt;, classique :) Ainsi que les &lt;a href=&quot;http://www.pygame.org/tags/&quot;&gt;projets publiés sur le site&lt;/a&gt;, donc des tonnes de code que l’on peut lire et lancer pour apprendre!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=bMt47wvK6u0&quot;&gt;Une vidéo d’introduction à Pygame&lt;/a&gt;, faire lors de la PyCon. Je vous la conseille vivement même si c’est en anglais car c’est aussi tout un tas de mécanismes des jeux qui sont expliqués.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pour commencer un petit mot ce le jeu en question. C’est un jeu de carte inspiré entièrement d’un mini-jeu proposé dans le jeu vidéo Final Fantasy VIII sur la Playstation (première du nom), appelé TripleTriad. Je vais essayer dans cet article d’expliquer d’une manière ou d’une autre comment je m’y suis pris pour coder ça. En rappellant que c’est mon premier vrai programme, et qu’il y a surement des choses à améliorer (ne serait-ce que les bugs que je n’arrive pas encore à résoudre x) ). Vous pouvez retrouver TuxleTriad ( je suis pas allé chercher bien loin pour le nom, pour ceux qui connaissent TripleTriad ;) ) &lt;a href=&quot;https://github.com/Ilphrin/TuxleTriad&quot;&gt;ICI&lt;/a&gt;. Pour le lancer il suffit d’utiliser python2.7 (Attention, pas une version 3.x!) sur le fichier &lt;strong&gt;Menu.py&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Pour ce premier article, je vais commencer par expliquer comment on gère les cartes du joueurs, c’est-à-dire comment récupérer un fichier image pour une carte,. Dans le dossier du jeu, chaque fichier de carte possède un nom sous cette forme:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Nom + &quot;B&quot; ou &quot;R&quot; + &quot;.jpg&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On a ‘B’ pour bleu si c’est le joueur de gauche, et ‘R’ pour rouge si c’est le joueur 2. Chaque carte possède donc un propriétaire (selon la couleur), un nom, et 4 numéro indiqués sur la carte. Ensuite il nous faut une liste pour enregistrer, d’une part, le nom de la carte, et d’autre part ses caractéristique. Cette liste correspond au fichier &lt;u&gt;listOfCards.py&lt;/u&gt;. La deuxième liste contient les caractéristique. L’indice de la liste de caractéristique correspond exactement à la carte du même indice dans la liste de nom.
La liste ‘value’ contient une sous-liste pour chaque carte. Les valeurs de cette liste sont:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Le numéro du haut&lt;/li&gt;
  &lt;li&gt;Le numéro de droite&lt;/li&gt;
  &lt;li&gt;Le numéro du bas&lt;/li&gt;
  &lt;li&gt;Le numéro de gauche&lt;/li&gt;
  &lt;li&gt;Les deux autres ne sont pas encore utilisé dans le jeu ne vous en préocuppez donc pas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Avant d’aller plus loin il faut faire un petit point sur deux outils SUPER importants, tellement importants qu’il n’y a quasiment qu’eux dans mon jeu, et sont présent dans tout les programmes Pygame.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pygame02.png&quot; alt=&quot;pygame02&quot; style=&quot;float:left&quot; /&gt;
Dans Pygame, lorsque l’on veut afficher quelque chose, il faut créer deux objets: &lt;strong&gt;Surface&lt;/strong&gt; et &lt;strong&gt;Rect&lt;/strong&gt;. Les deux peuvent être représentés par un carré à l’écran. Voyez la Surface comme un calque que l’on viendrait poser sur la fenêtre, avec quelque chose déssiné dessus. Une Surface contient donc tout les éléments qui permettent de colorier des pixels. A l’inverse, l’objet Rect ne gère aucun affichage, mais on peut l’imaginer comme une punaise que l’on mettrait sur un calque pour qu’il tienne en place. Sous forme aussi de carré, il contient les coordonnées du calque à plusieurs endroits, et permet de gérer des événements comme des collisions (entre deux Surface, ou même avec avec la souris si elle se trouve dessus).&lt;/p&gt;

&lt;p&gt;Maintenant vous avez tout ce qu’il faut pour comprendre le fichier &lt;u&gt;Card.py&lt;/u&gt;. Chaque carte sera une instance de la classe &lt;strong&gt;Card&lt;/strong&gt;. On enregistre donc dans cette classe:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;self.owner -&amp;gt; Le propriétaire de la carte&lt;/li&gt;
  &lt;li&gt;self.number -&amp;gt; La position du nom de la carte dans listOfCards.py&lt;/li&gt;
  &lt;li&gt;self.name -&amp;gt; le nom de la carte qu’on vient chercher directement dans la liste allCards de listOfCards.py&lt;/li&gt;
  &lt;li&gt;self.top, self.right,…. -&amp;gt; Les 4 valeurs de la carte&lt;/li&gt;
  &lt;li&gt;self.element, self.type, self.About -&amp;gt; Pas intéréssant pour le moment&lt;/li&gt;
  &lt;li&gt;self.inHand -&amp;gt; On veut constamment savoir si la carte est encore dans la main du joueur&lt;/li&gt;
  &lt;li&gt;self.image, self.rect -&amp;gt; La Surface et le Rect de la carte&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;self.image&lt;/strong&gt; vaut ‘None’ au début de la classe, mais on y met une Surface dans la fonction &lt;strong&gt;getCard(self)&lt;/strong&gt; du fichier &lt;u&gt;functions.py&lt;/u&gt;. Cette fonction va d’abord chercher le chemin du fichier carte en fonction du propriétaire, puis il va utiliser la fonction &lt;strong&gt;pygame.image.load&lt;/strong&gt; de Pygame. Cette fonction retourne une Surface remplie avec l’image envoyée en paramètre. Et pour finir, de retour dans la classe Card, on récupère le Rect correspondant à self.image avec une autre fonction de Pygame: &lt;strong&gt;self.image.get_rect()&lt;/strong&gt;. Cette fonction s’utlise uniquement sur une Surface, et va en extraire un objet Rect qui contient les information nécessaire à l’exploitation  de la Surface. (Sa largeur, sa hauteur, etc…).&lt;/p&gt;

&lt;p&gt;Voilà il me semble que l’on a fait le tour de cette première partie. La fonction &lt;strong&gt;changeOwner&lt;/strong&gt; permet au jeu de gérer le changement de propriétaire (lorsque l’adversaire capture notre carte ou réciproquement), et la fonction &lt;strong&gt;__repr__&lt;/strong&gt; est propre à Python, et nous permet de faire un “print notreObjet” même si cet objet n’est pas une chaine de caractères.&lt;/p&gt;

&lt;p&gt;C’est la première fois que je fais ce genre d’article, n’hésitez donc pas à me donner des retour, me dire ce qui vous a plu/déplu, ce qui aurait mérité plus d’éclaircissement etc… Et si quelqu’un lisant cet article s’y connait en Pygame et souhaite me corriger sur quelque chose, qu’il le fasse! Je ne voudrais pas dire de bêtises et être la cause du mal de crâne de plusieurs personnes ;)&lt;/p&gt;

&lt;p&gt;Voilà amusez-vous bien et bonne programmation ;)&lt;/p&gt;
</description>
				<pubDate>Fri, 15 Aug 2014 00:00:00 +0200</pubDate>
				<link>http://ilphrin.com/planet/2014/08/15/introduction-a-pygame.html</link>
				<guid isPermaLink="true">http://ilphrin.com/planet/2014/08/15/introduction-a-pygame.html</guid>
			</item>
		
	</channel>
</rss>
